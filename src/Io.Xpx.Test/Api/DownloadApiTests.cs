/* 
 * Proximax P2P Storage REST API
 *
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: alvin.reyes@botmill.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Io.Xpx.Client;
using Io.Xpx.Api;
using Io.Xpx.Model;

namespace Io.Xpx.Test
{
    /// <summary>
    ///  Class for testing DownloadApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DownloadApiTests
    {
        private DownloadApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DownloadApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DownloadApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DownloadApi
            //Assert.IsInstanceOfType(typeof(DownloadApi), instance, "instance is a DownloadApi");
        }

        
        /// <summary>
        /// Test DownloadPlainMessageFileUsingNemHashUsingGET
        /// </summary>
        [Test]
        public void DownloadPlainMessageFileUsingNemHashUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nemhash = null;
            //var response = instance.DownloadPlainMessageFileUsingNemHashUsingGET(nemhash);
            //Assert.IsInstanceOf<ResponseEntity> (response, "response is ResponseEntity");
        }
        
        /// <summary>
        /// Test DownloadRawBytesPlainMessageFileUsingNemHashUsingGET
        /// </summary>
        [Test]
        public void DownloadRawBytesPlainMessageFileUsingNemHashUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nemhash = null;
            //var response = instance.DownloadRawBytesPlainMessageFileUsingNemHashUsingGET(nemhash);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test DownloadRawBytesSecureMessageFileUsingNemHashUsingGET
        /// </summary>
        [Test]
        public void DownloadRawBytesSecureMessageFileUsingNemHashUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nemhash = null;
            //string xPvkey = null;
            //var response = instance.DownloadRawBytesSecureMessageFileUsingNemHashUsingGET(nemhash, xPvkey);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test DownloadRawBytesUsingHashUsingPOST
        /// </summary>
        [Test]
        public void DownloadRawBytesUsingHashUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hash = null;
            //var response = instance.DownloadRawBytesUsingHashUsingPOST(hash);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test DownloadSecureMessageFileUsingNemHashUsingGET
        /// </summary>
        [Test]
        public void DownloadSecureMessageFileUsingNemHashUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xPvkey = null;
            //string nemhash = null;
            //var response = instance.DownloadSecureMessageFileUsingNemHashUsingGET(xPvkey, nemhash);
            //Assert.IsInstanceOf<ResponseEntity> (response, "response is ResponseEntity");
        }
        
        /// <summary>
        /// Test DownloadStreamPlainMessageFileUsingNemHashUsingGET
        /// </summary>
        [Test]
        public void DownloadStreamPlainMessageFileUsingNemHashUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nemhash = null;
            //var response = instance.DownloadStreamPlainMessageFileUsingNemHashUsingGET(nemhash);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test DownloadStreamSecureMessageFileUsingNemHashUsingGET
        /// </summary>
        [Test]
        public void DownloadStreamSecureMessageFileUsingNemHashUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nemhash = null;
            //string xPvkey = null;
            //var response = instance.DownloadStreamSecureMessageFileUsingNemHashUsingGET(nemhash, xPvkey);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test DownloadStreamUsingHashUsingPOST
        /// </summary>
        [Test]
        public void DownloadStreamUsingHashUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hash = null;
            //var response = instance.DownloadStreamUsingHashUsingPOST(hash);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
    }

}
