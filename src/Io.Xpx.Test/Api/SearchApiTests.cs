/* 
 * Proximax P2P Storage REST API
 *
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: alvin.reyes@botmill.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Io.Xpx.Client;
using Io.Xpx.Api;
using Io.Xpx.Model;

namespace Io.Xpx.Test
{
    /// <summary>
    ///  Class for testing SearchApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SearchApiTests
    {
        private SearchApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SearchApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SearchApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SearchApi
            //Assert.IsInstanceOfType(typeof(SearchApi), instance, "instance is a SearchApi");
        }

        
        /// <summary>
        /// Test SearchContentUsingAllNemHashUsingGET
        /// </summary>
        [Test]
        public void SearchContentUsingAllNemHashUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xPvkey = null;
            //string nemHash = null;
            //var response = instance.SearchContentUsingAllNemHashUsingGET(xPvkey, nemHash);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SearchContentUsingPublicNemHashUsingGET
        /// </summary>
        [Test]
        public void SearchContentUsingPublicNemHashUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xPubkey = null;
            //string nemHash = null;
            //var response = instance.SearchContentUsingPublicNemHashUsingGET(xPubkey, nemHash);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SearchContentUsingTextUsingGET
        /// </summary>
        [Test]
        public void SearchContentUsingTextUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xPubkey = null;
            //string text = null;
            //var response = instance.SearchContentUsingTextUsingGET(xPubkey, text);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SearchDataHashUsingPublicNemHashUsingGET
        /// </summary>
        [Test]
        public void SearchDataHashUsingPublicNemHashUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nemHash = null;
            //var response = instance.SearchDataHashUsingPublicNemHashUsingGET(nemHash);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test SearchTransactionPvKeyWithKeywordUsingGET
        /// </summary>
        [Test]
        public void SearchTransactionPvKeyWithKeywordUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xPvkey = null;
            //string keywords = null;
            //var response = instance.SearchTransactionPvKeyWithKeywordUsingGET(xPvkey, keywords);
            //Assert.IsInstanceOf<List<BinaryTransactionEncryptedMessage>> (response, "response is List<BinaryTransactionEncryptedMessage>");
        }
        
        /// <summary>
        /// Test SearchTransactionWithKeywordUsingGET
        /// </summary>
        [Test]
        public void SearchTransactionWithKeywordUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xPubkey = null;
            //string keywords = null;
            //var response = instance.SearchTransactionWithKeywordUsingGET(xPubkey, keywords);
            //Assert.IsInstanceOf<List<BinaryTransactionEncryptedMessage>> (response, "response is List<BinaryTransactionEncryptedMessage>");
        }
        
        /// <summary>
        /// Test SearchTransactionWithMetadataUsingGET
        /// </summary>
        [Test]
        public void SearchTransactionWithMetadataUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xPubkey = null;
            //string text = null;
            //var response = instance.SearchTransactionWithMetadataUsingGET(xPubkey, text);
            //Assert.IsInstanceOf<List<BinaryTransactionEncryptedMessage>> (response, "response is List<BinaryTransactionEncryptedMessage>");
        }
        
    }

}
