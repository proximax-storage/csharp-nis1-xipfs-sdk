/* 
 * Proximax P2P Storage REST API
 *
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: alvin.reyes@botmill.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Io.Xpx.Client;
using Io.Xpx.Model;

namespace Io.Xpx.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// getAllIncomingNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>string</returns>
        string GetAllIncomingNemAddressTransactionsUsingGET (string publicKey);

        /// <summary>
        /// getAllIncomingNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetAllIncomingNemAddressTransactionsUsingGETWithHttpInfo (string publicKey);
        /// <summary>
        /// getAllNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>string</returns>
        string GetAllNemAddressTransactionsUsingGET (string publicKey);

        /// <summary>
        /// getAllNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetAllNemAddressTransactionsUsingGETWithHttpInfo (string publicKey);
        /// <summary>
        /// getAllNemAddressTransactionsWithPageSize
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <param name="pageSize">Page Size</param>
        /// <returns>string</returns>
        string GetAllNemAddressTransactionsWithPageSizeUsingGET (string publicKey, string pageSize);

        /// <summary>
        /// getAllNemAddressTransactionsWithPageSize
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <param name="pageSize">Page Size</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetAllNemAddressTransactionsWithPageSizeUsingGETWithHttpInfo (string publicKey, string pageSize);
        /// <summary>
        /// getAllOutgoingNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>string</returns>
        string GetAllOutgoingNemAddressTransactionsUsingGET (string publicKey);

        /// <summary>
        /// getAllOutgoingNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetAllOutgoingNemAddressTransactionsUsingGETWithHttpInfo (string publicKey);
        /// <summary>
        /// getAllUnconfirmedNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>string</returns>
        string GetAllUnconfirmedNemAddressTransactionsUsingGET (string publicKey);

        /// <summary>
        /// getAllUnconfirmedNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetAllUnconfirmedNemAddressTransactionsUsingGETWithHttpInfo (string publicKey);
        /// <summary>
        /// Get the NEM Address Details
        /// </summary>
        /// <remarks>
        /// This endpoint returns the NEM Address/Account Information of a given address
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>AccountMetaDataPair</returns>
        AccountMetaDataPair GetNemAddressDetailsUsingGET (string publicKey);

        /// <summary>
        /// Get the NEM Address Details
        /// </summary>
        /// <remarks>
        /// This endpoint returns the NEM Address/Account Information of a given address
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>ApiResponse of AccountMetaDataPair</returns>
        ApiResponse<AccountMetaDataPair> GetNemAddressDetailsUsingGETWithHttpInfo (string publicKey);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// getAllIncomingNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetAllIncomingNemAddressTransactionsUsingGETAsync (string publicKey);

        /// <summary>
        /// getAllIncomingNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAllIncomingNemAddressTransactionsUsingGETAsyncWithHttpInfo (string publicKey);
        /// <summary>
        /// getAllNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetAllNemAddressTransactionsUsingGETAsync (string publicKey);

        /// <summary>
        /// getAllNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAllNemAddressTransactionsUsingGETAsyncWithHttpInfo (string publicKey);
        /// <summary>
        /// getAllNemAddressTransactionsWithPageSize
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <param name="pageSize">Page Size</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetAllNemAddressTransactionsWithPageSizeUsingGETAsync (string publicKey, string pageSize);

        /// <summary>
        /// getAllNemAddressTransactionsWithPageSize
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <param name="pageSize">Page Size</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAllNemAddressTransactionsWithPageSizeUsingGETAsyncWithHttpInfo (string publicKey, string pageSize);
        /// <summary>
        /// getAllOutgoingNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetAllOutgoingNemAddressTransactionsUsingGETAsync (string publicKey);

        /// <summary>
        /// getAllOutgoingNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAllOutgoingNemAddressTransactionsUsingGETAsyncWithHttpInfo (string publicKey);
        /// <summary>
        /// getAllUnconfirmedNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetAllUnconfirmedNemAddressTransactionsUsingGETAsync (string publicKey);

        /// <summary>
        /// getAllUnconfirmedNemAddressTransactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAllUnconfirmedNemAddressTransactionsUsingGETAsyncWithHttpInfo (string publicKey);
        /// <summary>
        /// Get the NEM Address Details
        /// </summary>
        /// <remarks>
        /// This endpoint returns the NEM Address/Account Information of a given address
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of AccountMetaDataPair</returns>
        System.Threading.Tasks.Task<AccountMetaDataPair> GetNemAddressDetailsUsingGETAsync (string publicKey);

        /// <summary>
        /// Get the NEM Address Details
        /// </summary>
        /// <remarks>
        /// This endpoint returns the NEM Address/Account Information of a given address
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of ApiResponse (AccountMetaDataPair)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountMetaDataPair>> GetNemAddressDetailsUsingGETAsyncWithHttpInfo (string publicKey);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApi : IAccountApi
    {
        private Io.Xpx.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Xpx.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// getAllIncomingNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>string</returns>
        public string GetAllIncomingNemAddressTransactionsUsingGET (string publicKey)
        {
             ApiResponse<string> localVarResponse = GetAllIncomingNemAddressTransactionsUsingGETWithHttpInfo(publicKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllIncomingNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetAllIncomingNemAddressTransactionsUsingGETWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountApi->GetAllIncomingNemAddressTransactionsUsingGET");

            var localVarPath = "/account/get/all-incoming-transactions/{publicKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllIncomingNemAddressTransactionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// getAllIncomingNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetAllIncomingNemAddressTransactionsUsingGETAsync (string publicKey)
        {
             ApiResponse<string> localVarResponse = await GetAllIncomingNemAddressTransactionsUsingGETAsyncWithHttpInfo(publicKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllIncomingNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAllIncomingNemAddressTransactionsUsingGETAsyncWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountApi->GetAllIncomingNemAddressTransactionsUsingGET");

            var localVarPath = "/account/get/all-incoming-transactions/{publicKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllIncomingNemAddressTransactionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// getAllNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>string</returns>
        public string GetAllNemAddressTransactionsUsingGET (string publicKey)
        {
             ApiResponse<string> localVarResponse = GetAllNemAddressTransactionsUsingGETWithHttpInfo(publicKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetAllNemAddressTransactionsUsingGETWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountApi->GetAllNemAddressTransactionsUsingGET");

            var localVarPath = "/account/get/all-transactions/{publicKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllNemAddressTransactionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// getAllNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetAllNemAddressTransactionsUsingGETAsync (string publicKey)
        {
             ApiResponse<string> localVarResponse = await GetAllNemAddressTransactionsUsingGETAsyncWithHttpInfo(publicKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAllNemAddressTransactionsUsingGETAsyncWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountApi->GetAllNemAddressTransactionsUsingGET");

            var localVarPath = "/account/get/all-transactions/{publicKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllNemAddressTransactionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// getAllNemAddressTransactionsWithPageSize 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <param name="pageSize">Page Size</param>
        /// <returns>string</returns>
        public string GetAllNemAddressTransactionsWithPageSizeUsingGET (string publicKey, string pageSize)
        {
             ApiResponse<string> localVarResponse = GetAllNemAddressTransactionsWithPageSizeUsingGETWithHttpInfo(publicKey, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllNemAddressTransactionsWithPageSize 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <param name="pageSize">Page Size</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetAllNemAddressTransactionsWithPageSizeUsingGETWithHttpInfo (string publicKey, string pageSize)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountApi->GetAllNemAddressTransactionsWithPageSizeUsingGET");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling AccountApi->GetAllNemAddressTransactionsWithPageSizeUsingGET");

            var localVarPath = "/account/get/all-transactions/{publicKey}/{pageSize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllNemAddressTransactionsWithPageSizeUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// getAllNemAddressTransactionsWithPageSize 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <param name="pageSize">Page Size</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetAllNemAddressTransactionsWithPageSizeUsingGETAsync (string publicKey, string pageSize)
        {
             ApiResponse<string> localVarResponse = await GetAllNemAddressTransactionsWithPageSizeUsingGETAsyncWithHttpInfo(publicKey, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllNemAddressTransactionsWithPageSize 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <param name="pageSize">Page Size</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAllNemAddressTransactionsWithPageSizeUsingGETAsyncWithHttpInfo (string publicKey, string pageSize)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountApi->GetAllNemAddressTransactionsWithPageSizeUsingGET");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling AccountApi->GetAllNemAddressTransactionsWithPageSizeUsingGET");

            var localVarPath = "/account/get/all-transactions/{publicKey}/{pageSize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllNemAddressTransactionsWithPageSizeUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// getAllOutgoingNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>string</returns>
        public string GetAllOutgoingNemAddressTransactionsUsingGET (string publicKey)
        {
             ApiResponse<string> localVarResponse = GetAllOutgoingNemAddressTransactionsUsingGETWithHttpInfo(publicKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllOutgoingNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetAllOutgoingNemAddressTransactionsUsingGETWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountApi->GetAllOutgoingNemAddressTransactionsUsingGET");

            var localVarPath = "/account/get/all-outgoing-transactions/{publicKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOutgoingNemAddressTransactionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// getAllOutgoingNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetAllOutgoingNemAddressTransactionsUsingGETAsync (string publicKey)
        {
             ApiResponse<string> localVarResponse = await GetAllOutgoingNemAddressTransactionsUsingGETAsyncWithHttpInfo(publicKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllOutgoingNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAllOutgoingNemAddressTransactionsUsingGETAsyncWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountApi->GetAllOutgoingNemAddressTransactionsUsingGET");

            var localVarPath = "/account/get/all-outgoing-transactions/{publicKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOutgoingNemAddressTransactionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// getAllUnconfirmedNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>string</returns>
        public string GetAllUnconfirmedNemAddressTransactionsUsingGET (string publicKey)
        {
             ApiResponse<string> localVarResponse = GetAllUnconfirmedNemAddressTransactionsUsingGETWithHttpInfo(publicKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllUnconfirmedNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetAllUnconfirmedNemAddressTransactionsUsingGETWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountApi->GetAllUnconfirmedNemAddressTransactionsUsingGET");

            var localVarPath = "/account/get/all-unconfirmed-transactions/{publicKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUnconfirmedNemAddressTransactionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// getAllUnconfirmedNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetAllUnconfirmedNemAddressTransactionsUsingGETAsync (string publicKey)
        {
             ApiResponse<string> localVarResponse = await GetAllUnconfirmedNemAddressTransactionsUsingGETAsyncWithHttpInfo(publicKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllUnconfirmedNemAddressTransactions 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAllUnconfirmedNemAddressTransactionsUsingGETAsyncWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountApi->GetAllUnconfirmedNemAddressTransactionsUsingGET");

            var localVarPath = "/account/get/all-unconfirmed-transactions/{publicKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUnconfirmedNemAddressTransactionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the NEM Address Details This endpoint returns the NEM Address/Account Information of a given address
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>AccountMetaDataPair</returns>
        public AccountMetaDataPair GetNemAddressDetailsUsingGET (string publicKey)
        {
             ApiResponse<AccountMetaDataPair> localVarResponse = GetNemAddressDetailsUsingGETWithHttpInfo(publicKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the NEM Address Details This endpoint returns the NEM Address/Account Information of a given address
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>ApiResponse of AccountMetaDataPair</returns>
        public ApiResponse< AccountMetaDataPair > GetNemAddressDetailsUsingGETWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountApi->GetNemAddressDetailsUsingGET");

            var localVarPath = "/account/get/info/{publicKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNemAddressDetailsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountMetaDataPair>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountMetaDataPair) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountMetaDataPair)));
        }

        /// <summary>
        /// Get the NEM Address Details This endpoint returns the NEM Address/Account Information of a given address
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of AccountMetaDataPair</returns>
        public async System.Threading.Tasks.Task<AccountMetaDataPair> GetNemAddressDetailsUsingGETAsync (string publicKey)
        {
             ApiResponse<AccountMetaDataPair> localVarResponse = await GetNemAddressDetailsUsingGETAsyncWithHttpInfo(publicKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the NEM Address Details This endpoint returns the NEM Address/Account Information of a given address
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The NEM Account Public Key</param>
        /// <returns>Task of ApiResponse (AccountMetaDataPair)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountMetaDataPair>> GetNemAddressDetailsUsingGETAsyncWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountApi->GetNemAddressDetailsUsingGET");

            var localVarPath = "/account/get/info/{publicKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNemAddressDetailsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountMetaDataPair>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountMetaDataPair) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountMetaDataPair)));
        }

    }
}
