/* 
 * Proximax P2P Storage REST API
 *
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: alvin.reyes@botmill.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Io.Xpx.Client;
using Io.Xpx.Model;

namespace Io.Xpx.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDownloadApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DownloadPlainMessageFileUsingNemHashUsingGET (string nemhash);

        /// <summary>
        /// Download resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DownloadPlainMessageFileUsingNemHashUsingGETWithHttpInfo (string nemhash);
        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>byte[]</returns>
        byte[] DownloadRawBytesPlainMessageFileUsingNemHashUsingGET (string nemhash);

        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadRawBytesPlainMessageFileUsingNemHashUsingGETWithHttpInfo (string nemhash);
        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>byte[]</returns>
        byte[] DownloadRawBytesSecureMessageFileUsingNemHashUsingGET (string nemhash, string xPvkey = null);

        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadRawBytesSecureMessageFileUsingNemHashUsingGETWithHttpInfo (string nemhash, string xPvkey = null);
        /// <summary>
        /// Download secured encrypted resource/file using Data Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual encrypted file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>byte[]</returns>
        byte[] DownloadRawBytesUsingHashUsingPOST (string hash);

        /// <summary>
        /// Download secured encrypted resource/file using Data Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual encrypted file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadRawBytesUsingHashUsingPOSTWithHttpInfo (string hash);
        /// <summary>
        /// Download resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DownloadSecureMessageFileUsingNemHashUsingGET (string xPvkey, string nemhash);

        /// <summary>
        /// Download resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DownloadSecureMessageFileUsingNemHashUsingGETWithHttpInfo (string xPvkey, string nemhash);
        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>byte[]</returns>
        byte[] DownloadStreamPlainMessageFileUsingNemHashUsingGET (string nemhash);

        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadStreamPlainMessageFileUsingNemHashUsingGETWithHttpInfo (string nemhash);
        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>byte[]</returns>
        byte[] DownloadStreamSecureMessageFileUsingNemHashUsingGET (string nemhash, string xPvkey = null);

        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadStreamSecureMessageFileUsingNemHashUsingGETWithHttpInfo (string nemhash, string xPvkey = null);
        /// <summary>
        /// Download secured encrypted resource/file using Data Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual encrypted file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>byte[]</returns>
        byte[] DownloadStreamUsingHashUsingPOST (string hash);

        /// <summary>
        /// Download secured encrypted resource/file using Data Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual encrypted file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadStreamUsingHashUsingPOSTWithHttpInfo (string hash);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Download resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DownloadPlainMessageFileUsingNemHashUsingGETAsync (string nemhash);

        /// <summary>
        /// Download resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DownloadPlainMessageFileUsingNemHashUsingGETAsyncWithHttpInfo (string nemhash);
        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadRawBytesPlainMessageFileUsingNemHashUsingGETAsync (string nemhash);

        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadRawBytesPlainMessageFileUsingNemHashUsingGETAsyncWithHttpInfo (string nemhash);
        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadRawBytesSecureMessageFileUsingNemHashUsingGETAsync (string nemhash, string xPvkey = null);

        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadRawBytesSecureMessageFileUsingNemHashUsingGETAsyncWithHttpInfo (string nemhash, string xPvkey = null);
        /// <summary>
        /// Download secured encrypted resource/file using Data Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual encrypted file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadRawBytesUsingHashUsingPOSTAsync (string hash);

        /// <summary>
        /// Download secured encrypted resource/file using Data Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual encrypted file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadRawBytesUsingHashUsingPOSTAsyncWithHttpInfo (string hash);
        /// <summary>
        /// Download resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DownloadSecureMessageFileUsingNemHashUsingGETAsync (string xPvkey, string nemhash);

        /// <summary>
        /// Download resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DownloadSecureMessageFileUsingNemHashUsingGETAsyncWithHttpInfo (string xPvkey, string nemhash);
        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadStreamPlainMessageFileUsingNemHashUsingGETAsync (string nemhash);

        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadStreamPlainMessageFileUsingNemHashUsingGETAsyncWithHttpInfo (string nemhash);
        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadStreamSecureMessageFileUsingNemHashUsingGETAsync (string nemhash, string xPvkey = null);

        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadStreamSecureMessageFileUsingNemHashUsingGETAsyncWithHttpInfo (string nemhash, string xPvkey = null);
        /// <summary>
        /// Download secured encrypted resource/file using Data Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual encrypted file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadStreamUsingHashUsingPOSTAsync (string hash);

        /// <summary>
        /// Download secured encrypted resource/file using Data Hash
        /// </summary>
        /// <remarks>
        /// This endpoint returns a byte array format of the actual encrypted file
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadStreamUsingHashUsingPOSTAsyncWithHttpInfo (string hash);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DownloadApi : IDownloadApi
    {
        private Io.Xpx.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DownloadApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DownloadApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Xpx.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Download resource/file using NEM Transaction Hash This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DownloadPlainMessageFileUsingNemHashUsingGET (string nemhash)
        {
             ApiResponse<ResponseEntity> localVarResponse = DownloadPlainMessageFileUsingNemHashUsingGETWithHttpInfo(nemhash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download resource/file using NEM Transaction Hash This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DownloadPlainMessageFileUsingNemHashUsingGETWithHttpInfo (string nemhash)
        {
            // verify the required parameter 'nemhash' is set
            if (nemhash == null)
                throw new ApiException(400, "Missing required parameter 'nemhash' when calling DownloadApi->DownloadPlainMessageFileUsingNemHashUsingGET");

            var localVarPath = "/download/data/plain/{nemhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemhash != null) localVarPathParams.Add("nemhash", Configuration.ApiClient.ParameterToString(nemhash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadPlainMessageFileUsingNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Download resource/file using NEM Transaction Hash This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DownloadPlainMessageFileUsingNemHashUsingGETAsync (string nemhash)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DownloadPlainMessageFileUsingNemHashUsingGETAsyncWithHttpInfo(nemhash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download resource/file using NEM Transaction Hash This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DownloadPlainMessageFileUsingNemHashUsingGETAsyncWithHttpInfo (string nemhash)
        {
            // verify the required parameter 'nemhash' is set
            if (nemhash == null)
                throw new ApiException(400, "Missing required parameter 'nemhash' when calling DownloadApi->DownloadPlainMessageFileUsingNemHashUsingGET");

            var localVarPath = "/download/data/plain/{nemhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemhash != null) localVarPathParams.Add("nemhash", Configuration.ApiClient.ParameterToString(nemhash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadPlainMessageFileUsingNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadRawBytesPlainMessageFileUsingNemHashUsingGET (string nemhash)
        {
             ApiResponse<byte[]> localVarResponse = DownloadRawBytesPlainMessageFileUsingNemHashUsingGETWithHttpInfo(nemhash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DownloadRawBytesPlainMessageFileUsingNemHashUsingGETWithHttpInfo (string nemhash)
        {
            // verify the required parameter 'nemhash' is set
            if (nemhash == null)
                throw new ApiException(400, "Missing required parameter 'nemhash' when calling DownloadApi->DownloadRawBytesPlainMessageFileUsingNemHashUsingGET");

            var localVarPath = "/download/data/plain/rawbytes/{nemhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemhash != null) localVarPathParams.Add("nemhash", Configuration.ApiClient.ParameterToString(nemhash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadRawBytesPlainMessageFileUsingNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadRawBytesPlainMessageFileUsingNemHashUsingGETAsync (string nemhash)
        {
             ApiResponse<byte[]> localVarResponse = await DownloadRawBytesPlainMessageFileUsingNemHashUsingGETAsyncWithHttpInfo(nemhash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadRawBytesPlainMessageFileUsingNemHashUsingGETAsyncWithHttpInfo (string nemhash)
        {
            // verify the required parameter 'nemhash' is set
            if (nemhash == null)
                throw new ApiException(400, "Missing required parameter 'nemhash' when calling DownloadApi->DownloadRawBytesPlainMessageFileUsingNemHashUsingGET");

            var localVarPath = "/download/data/plain/rawbytes/{nemhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemhash != null) localVarPathParams.Add("nemhash", Configuration.ApiClient.ParameterToString(nemhash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadRawBytesPlainMessageFileUsingNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadRawBytesSecureMessageFileUsingNemHashUsingGET (string nemhash, string xPvkey = null)
        {
             ApiResponse<byte[]> localVarResponse = DownloadRawBytesSecureMessageFileUsingNemHashUsingGETWithHttpInfo(nemhash, xPvkey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DownloadRawBytesSecureMessageFileUsingNemHashUsingGETWithHttpInfo (string nemhash, string xPvkey = null)
        {
            // verify the required parameter 'nemhash' is set
            if (nemhash == null)
                throw new ApiException(400, "Missing required parameter 'nemhash' when calling DownloadApi->DownloadRawBytesSecureMessageFileUsingNemHashUsingGET");

            var localVarPath = "/download/data/secure/rawbytes/{nemhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemhash != null) localVarPathParams.Add("nemhash", Configuration.ApiClient.ParameterToString(nemhash)); // path parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadRawBytesSecureMessageFileUsingNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadRawBytesSecureMessageFileUsingNemHashUsingGETAsync (string nemhash, string xPvkey = null)
        {
             ApiResponse<byte[]> localVarResponse = await DownloadRawBytesSecureMessageFileUsingNemHashUsingGETAsyncWithHttpInfo(nemhash, xPvkey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadRawBytesSecureMessageFileUsingNemHashUsingGETAsyncWithHttpInfo (string nemhash, string xPvkey = null)
        {
            // verify the required parameter 'nemhash' is set
            if (nemhash == null)
                throw new ApiException(400, "Missing required parameter 'nemhash' when calling DownloadApi->DownloadRawBytesSecureMessageFileUsingNemHashUsingGET");

            var localVarPath = "/download/data/secure/rawbytes/{nemhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemhash != null) localVarPathParams.Add("nemhash", Configuration.ApiClient.ParameterToString(nemhash)); // path parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadRawBytesSecureMessageFileUsingNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download secured encrypted resource/file using Data Hash This endpoint returns a byte array format of the actual encrypted file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadRawBytesUsingHashUsingPOST (string hash)
        {
             ApiResponse<byte[]> localVarResponse = DownloadRawBytesUsingHashUsingPOSTWithHttpInfo(hash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download secured encrypted resource/file using Data Hash This endpoint returns a byte array format of the actual encrypted file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DownloadRawBytesUsingHashUsingPOSTWithHttpInfo (string hash)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling DownloadApi->DownloadRawBytesUsingHashUsingPOST");

            var localVarPath = "/download/data/rawbytes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarQueryParams.Add("hash", Configuration.ApiClient.ParameterToString(hash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadRawBytesUsingHashUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download secured encrypted resource/file using Data Hash This endpoint returns a byte array format of the actual encrypted file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadRawBytesUsingHashUsingPOSTAsync (string hash)
        {
             ApiResponse<byte[]> localVarResponse = await DownloadRawBytesUsingHashUsingPOSTAsyncWithHttpInfo(hash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download secured encrypted resource/file using Data Hash This endpoint returns a byte array format of the actual encrypted file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadRawBytesUsingHashUsingPOSTAsyncWithHttpInfo (string hash)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling DownloadApi->DownloadRawBytesUsingHashUsingPOST");

            var localVarPath = "/download/data/rawbytes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarQueryParams.Add("hash", Configuration.ApiClient.ParameterToString(hash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadRawBytesUsingHashUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download resource/file using NEM Transaction Hash This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DownloadSecureMessageFileUsingNemHashUsingGET (string xPvkey, string nemhash)
        {
             ApiResponse<ResponseEntity> localVarResponse = DownloadSecureMessageFileUsingNemHashUsingGETWithHttpInfo(xPvkey, nemhash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download resource/file using NEM Transaction Hash This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DownloadSecureMessageFileUsingNemHashUsingGETWithHttpInfo (string xPvkey, string nemhash)
        {
            // verify the required parameter 'xPvkey' is set
            if (xPvkey == null)
                throw new ApiException(400, "Missing required parameter 'xPvkey' when calling DownloadApi->DownloadSecureMessageFileUsingNemHashUsingGET");
            // verify the required parameter 'nemhash' is set
            if (nemhash == null)
                throw new ApiException(400, "Missing required parameter 'nemhash' when calling DownloadApi->DownloadSecureMessageFileUsingNemHashUsingGET");

            var localVarPath = "/download/data/secure/{nemhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemhash != null) localVarPathParams.Add("nemhash", Configuration.ApiClient.ParameterToString(nemhash)); // path parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadSecureMessageFileUsingNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Download resource/file using NEM Transaction Hash This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DownloadSecureMessageFileUsingNemHashUsingGETAsync (string xPvkey, string nemhash)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DownloadSecureMessageFileUsingNemHashUsingGETAsyncWithHttpInfo(xPvkey, nemhash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download resource/file using NEM Transaction Hash This endpoint returns either a byte array format of the actual file OR a JSON format GenericMessageResponse.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DownloadSecureMessageFileUsingNemHashUsingGETAsyncWithHttpInfo (string xPvkey, string nemhash)
        {
            // verify the required parameter 'xPvkey' is set
            if (xPvkey == null)
                throw new ApiException(400, "Missing required parameter 'xPvkey' when calling DownloadApi->DownloadSecureMessageFileUsingNemHashUsingGET");
            // verify the required parameter 'nemhash' is set
            if (nemhash == null)
                throw new ApiException(400, "Missing required parameter 'nemhash' when calling DownloadApi->DownloadSecureMessageFileUsingNemHashUsingGET");

            var localVarPath = "/download/data/secure/{nemhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemhash != null) localVarPathParams.Add("nemhash", Configuration.ApiClient.ParameterToString(nemhash)); // path parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadSecureMessageFileUsingNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseEntity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadStreamPlainMessageFileUsingNemHashUsingGET (string nemhash)
        {
             ApiResponse<byte[]> localVarResponse = DownloadStreamPlainMessageFileUsingNemHashUsingGETWithHttpInfo(nemhash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DownloadStreamPlainMessageFileUsingNemHashUsingGETWithHttpInfo (string nemhash)
        {
            // verify the required parameter 'nemhash' is set
            if (nemhash == null)
                throw new ApiException(400, "Missing required parameter 'nemhash' when calling DownloadApi->DownloadStreamPlainMessageFileUsingNemHashUsingGET");

            var localVarPath = "/download/data/plain/stream/{nemhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemhash != null) localVarPathParams.Add("nemhash", Configuration.ApiClient.ParameterToString(nemhash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadStreamPlainMessageFileUsingNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadStreamPlainMessageFileUsingNemHashUsingGETAsync (string nemhash)
        {
             ApiResponse<byte[]> localVarResponse = await DownloadStreamPlainMessageFileUsingNemHashUsingGETAsyncWithHttpInfo(nemhash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download plain resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadStreamPlainMessageFileUsingNemHashUsingGETAsyncWithHttpInfo (string nemhash)
        {
            // verify the required parameter 'nemhash' is set
            if (nemhash == null)
                throw new ApiException(400, "Missing required parameter 'nemhash' when calling DownloadApi->DownloadStreamPlainMessageFileUsingNemHashUsingGET");

            var localVarPath = "/download/data/plain/stream/{nemhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemhash != null) localVarPathParams.Add("nemhash", Configuration.ApiClient.ParameterToString(nemhash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadStreamPlainMessageFileUsingNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadStreamSecureMessageFileUsingNemHashUsingGET (string nemhash, string xPvkey = null)
        {
             ApiResponse<byte[]> localVarResponse = DownloadStreamSecureMessageFileUsingNemHashUsingGETWithHttpInfo(nemhash, xPvkey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DownloadStreamSecureMessageFileUsingNemHashUsingGETWithHttpInfo (string nemhash, string xPvkey = null)
        {
            // verify the required parameter 'nemhash' is set
            if (nemhash == null)
                throw new ApiException(400, "Missing required parameter 'nemhash' when calling DownloadApi->DownloadStreamSecureMessageFileUsingNemHashUsingGET");

            var localVarPath = "/download/data/secure/stream/{nemhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemhash != null) localVarPathParams.Add("nemhash", Configuration.ApiClient.ParameterToString(nemhash)); // path parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadStreamSecureMessageFileUsingNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadStreamSecureMessageFileUsingNemHashUsingGETAsync (string nemhash, string xPvkey = null)
        {
             ApiResponse<byte[]> localVarResponse = await DownloadStreamSecureMessageFileUsingNemHashUsingGETAsyncWithHttpInfo(nemhash, xPvkey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download secured resource/file using NEM Transaction Hash This endpoint returns a byte array format of the actual file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemhash">The NEM Transaction Hash</param>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadStreamSecureMessageFileUsingNemHashUsingGETAsyncWithHttpInfo (string nemhash, string xPvkey = null)
        {
            // verify the required parameter 'nemhash' is set
            if (nemhash == null)
                throw new ApiException(400, "Missing required parameter 'nemhash' when calling DownloadApi->DownloadStreamSecureMessageFileUsingNemHashUsingGET");

            var localVarPath = "/download/data/secure/stream/{nemhash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemhash != null) localVarPathParams.Add("nemhash", Configuration.ApiClient.ParameterToString(nemhash)); // path parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadStreamSecureMessageFileUsingNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download secured encrypted resource/file using Data Hash This endpoint returns a byte array format of the actual encrypted file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadStreamUsingHashUsingPOST (string hash)
        {
             ApiResponse<byte[]> localVarResponse = DownloadStreamUsingHashUsingPOSTWithHttpInfo(hash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download secured encrypted resource/file using Data Hash This endpoint returns a byte array format of the actual encrypted file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DownloadStreamUsingHashUsingPOSTWithHttpInfo (string hash)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling DownloadApi->DownloadStreamUsingHashUsingPOST");

            var localVarPath = "/download/data/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarQueryParams.Add("hash", Configuration.ApiClient.ParameterToString(hash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadStreamUsingHashUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download secured encrypted resource/file using Data Hash This endpoint returns a byte array format of the actual encrypted file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadStreamUsingHashUsingPOSTAsync (string hash)
        {
             ApiResponse<byte[]> localVarResponse = await DownloadStreamUsingHashUsingPOSTAsyncWithHttpInfo(hash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download secured encrypted resource/file using Data Hash This endpoint returns a byte array format of the actual encrypted file
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The Data Hash</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadStreamUsingHashUsingPOSTAsyncWithHttpInfo (string hash)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling DownloadApi->DownloadStreamUsingHashUsingPOST");

            var localVarPath = "/download/data/stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarQueryParams.Add("hash", Configuration.ApiClient.ParameterToString(hash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadStreamUsingHashUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}
