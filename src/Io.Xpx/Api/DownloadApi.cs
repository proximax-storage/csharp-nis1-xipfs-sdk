/* 
 * Proximax P2P Storage REST API
 *
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: proximax.storage@proximax.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Io.Xpx.Client;

namespace Io.Xpx.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDownloadApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download a binary using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download the binary file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream,base64)</param>
        /// <returns>byte[]</returns>
        byte[] DownloadBinaryUsingGET (string nemHash, string transferMode);

        /// <summary>
        /// Download a binary using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download the binary file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream,base64)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadBinaryUsingGETWithHttpInfo (string nemHash, string transferMode);
        /// <summary>
        /// Download a secure resource/blob using NEM Private Key and Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download a blob associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>byte[]</returns>
        byte[] DownloadSecureBinaryUsingGET (string xPvkey, string nemHash, string transferType);

        /// <summary>
        /// Download a secure resource/blob using NEM Private Key and Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download a blob associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadSecureBinaryUsingGETWithHttpInfo (string xPvkey, string nemHash, string transferType);
        /// <summary>
        /// Download a secure resource/file using NEM Private Key and Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download a file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>byte[]</returns>
        byte[] DownloadSecureFileUsingGET (string xPvkey, string nemHash, string transferType);

        /// <summary>
        /// Download a secure resource/file using NEM Private Key and Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download a file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadSecureFileUsingGETWithHttpInfo (string xPvkey, string nemHash, string transferType);
        /// <summary>
        /// Download a base64 encoded plain text data using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download a plain text data associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream)</param>
        /// <returns>byte[]</returns>
        byte[] DownloadTextUsingGET (string nemHash, string transferMode);

        /// <summary>
        /// Download a base64 encoded plain text data using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download a plain text data associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadTextUsingGETWithHttpInfo (string nemHash, string transferMode);
        /// <summary>
        /// Download IPFS file associated to the datahash
        /// </summary>
        /// <remarks>
        /// Download IPFS file associated to the datahash
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataHash">The NEM Transaction Hash</param>
        /// <returns>byte[]</returns>
        byte[] DownloadUsingDataHashUsingGET (string dataHash);

        /// <summary>
        /// Download IPFS file associated to the datahash
        /// </summary>
        /// <remarks>
        /// Download IPFS file associated to the datahash
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataHash">The NEM Transaction Hash</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadUsingDataHashUsingGETWithHttpInfo (string dataHash);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Download a binary using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download the binary file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream,base64)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadBinaryUsingGETAsync (string nemHash, string transferMode);

        /// <summary>
        /// Download a binary using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download the binary file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream,base64)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadBinaryUsingGETAsyncWithHttpInfo (string nemHash, string transferMode);
        /// <summary>
        /// Download a secure resource/blob using NEM Private Key and Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download a blob associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadSecureBinaryUsingGETAsync (string xPvkey, string nemHash, string transferType);

        /// <summary>
        /// Download a secure resource/blob using NEM Private Key and Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download a blob associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadSecureBinaryUsingGETAsyncWithHttpInfo (string xPvkey, string nemHash, string transferType);
        /// <summary>
        /// Download a secure resource/file using NEM Private Key and Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download a file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadSecureFileUsingGETAsync (string xPvkey, string nemHash, string transferType);

        /// <summary>
        /// Download a secure resource/file using NEM Private Key and Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download a file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadSecureFileUsingGETAsyncWithHttpInfo (string xPvkey, string nemHash, string transferType);
        /// <summary>
        /// Download a base64 encoded plain text data using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download a plain text data associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadTextUsingGETAsync (string nemHash, string transferMode);

        /// <summary>
        /// Download a base64 encoded plain text data using NEM Transaction Hash
        /// </summary>
        /// <remarks>
        /// Download a plain text data associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadTextUsingGETAsyncWithHttpInfo (string nemHash, string transferMode);
        /// <summary>
        /// Download IPFS file associated to the datahash
        /// </summary>
        /// <remarks>
        /// Download IPFS file associated to the datahash
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataHash">The NEM Transaction Hash</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadUsingDataHashUsingGETAsync (string dataHash);

        /// <summary>
        /// Download IPFS file associated to the datahash
        /// </summary>
        /// <remarks>
        /// Download IPFS file associated to the datahash
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataHash">The NEM Transaction Hash</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadUsingDataHashUsingGETAsyncWithHttpInfo (string dataHash);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DownloadApi : IDownloadApi
    {
        private Io.Xpx.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DownloadApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DownloadApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Xpx.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Download a binary using NEM Transaction Hash Download the binary file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream,base64)</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadBinaryUsingGET (string nemHash, string transferMode)
        {
             ApiResponse<byte[]> localVarResponse = DownloadBinaryUsingGETWithHttpInfo(nemHash, transferMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download a binary using NEM Transaction Hash Download the binary file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream,base64)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DownloadBinaryUsingGETWithHttpInfo (string nemHash, string transferMode)
        {
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling DownloadApi->DownloadBinaryUsingGET");
            // verify the required parameter 'transferMode' is set
            if (transferMode == null)
                throw new ApiException(400, "Missing required parameter 'transferMode' when calling DownloadApi->DownloadBinaryUsingGET");

            var localVarPath = "/download/binary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarQueryParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // query parameter
            if (transferMode != null) localVarQueryParams.Add("transferMode", Configuration.ApiClient.ParameterToString(transferMode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadBinaryUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download a binary using NEM Transaction Hash Download the binary file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream,base64)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadBinaryUsingGETAsync (string nemHash, string transferMode)
        {
             ApiResponse<byte[]> localVarResponse = await DownloadBinaryUsingGETAsyncWithHttpInfo(nemHash, transferMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download a binary using NEM Transaction Hash Download the binary file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream,base64)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadBinaryUsingGETAsyncWithHttpInfo (string nemHash, string transferMode)
        {
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling DownloadApi->DownloadBinaryUsingGET");
            // verify the required parameter 'transferMode' is set
            if (transferMode == null)
                throw new ApiException(400, "Missing required parameter 'transferMode' when calling DownloadApi->DownloadBinaryUsingGET");

            var localVarPath = "/download/binary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarQueryParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // query parameter
            if (transferMode != null) localVarQueryParams.Add("transferMode", Configuration.ApiClient.ParameterToString(transferMode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadBinaryUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download a secure resource/blob using NEM Private Key and Transaction Hash Download a blob associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadSecureBinaryUsingGET (string xPvkey, string nemHash, string transferType)
        {
             ApiResponse<byte[]> localVarResponse = DownloadSecureBinaryUsingGETWithHttpInfo(xPvkey, nemHash, transferType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download a secure resource/blob using NEM Private Key and Transaction Hash Download a blob associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DownloadSecureBinaryUsingGETWithHttpInfo (string xPvkey, string nemHash, string transferType)
        {
            // verify the required parameter 'xPvkey' is set
            if (xPvkey == null)
                throw new ApiException(400, "Missing required parameter 'xPvkey' when calling DownloadApi->DownloadSecureBinaryUsingGET");
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling DownloadApi->DownloadSecureBinaryUsingGET");
            // verify the required parameter 'transferType' is set
            if (transferType == null)
                throw new ApiException(400, "Missing required parameter 'transferType' when calling DownloadApi->DownloadSecureBinaryUsingGET");

            var localVarPath = "/download/secure/binary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarQueryParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // query parameter
            if (transferType != null) localVarQueryParams.Add("transferType", Configuration.ApiClient.ParameterToString(transferType)); // query parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadSecureBinaryUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download a secure resource/blob using NEM Private Key and Transaction Hash Download a blob associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadSecureBinaryUsingGETAsync (string xPvkey, string nemHash, string transferType)
        {
             ApiResponse<byte[]> localVarResponse = await DownloadSecureBinaryUsingGETAsyncWithHttpInfo(xPvkey, nemHash, transferType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download a secure resource/blob using NEM Private Key and Transaction Hash Download a blob associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadSecureBinaryUsingGETAsyncWithHttpInfo (string xPvkey, string nemHash, string transferType)
        {
            // verify the required parameter 'xPvkey' is set
            if (xPvkey == null)
                throw new ApiException(400, "Missing required parameter 'xPvkey' when calling DownloadApi->DownloadSecureBinaryUsingGET");
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling DownloadApi->DownloadSecureBinaryUsingGET");
            // verify the required parameter 'transferType' is set
            if (transferType == null)
                throw new ApiException(400, "Missing required parameter 'transferType' when calling DownloadApi->DownloadSecureBinaryUsingGET");

            var localVarPath = "/download/secure/binary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarQueryParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // query parameter
            if (transferType != null) localVarQueryParams.Add("transferType", Configuration.ApiClient.ParameterToString(transferType)); // query parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadSecureBinaryUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download a secure resource/file using NEM Private Key and Transaction Hash Download a file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadSecureFileUsingGET (string xPvkey, string nemHash, string transferType)
        {
             ApiResponse<byte[]> localVarResponse = DownloadSecureFileUsingGETWithHttpInfo(xPvkey, nemHash, transferType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download a secure resource/file using NEM Private Key and Transaction Hash Download a file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DownloadSecureFileUsingGETWithHttpInfo (string xPvkey, string nemHash, string transferType)
        {
            // verify the required parameter 'xPvkey' is set
            if (xPvkey == null)
                throw new ApiException(400, "Missing required parameter 'xPvkey' when calling DownloadApi->DownloadSecureFileUsingGET");
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling DownloadApi->DownloadSecureFileUsingGET");
            // verify the required parameter 'transferType' is set
            if (transferType == null)
                throw new ApiException(400, "Missing required parameter 'transferType' when calling DownloadApi->DownloadSecureFileUsingGET");

            var localVarPath = "/download/secure/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarQueryParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // query parameter
            if (transferType != null) localVarQueryParams.Add("transferType", Configuration.ApiClient.ParameterToString(transferType)); // query parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadSecureFileUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download a secure resource/file using NEM Private Key and Transaction Hash Download a file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadSecureFileUsingGETAsync (string xPvkey, string nemHash, string transferType)
        {
             ApiResponse<byte[]> localVarResponse = await DownloadSecureFileUsingGETAsyncWithHttpInfo(xPvkey, nemHash, transferType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download a secure resource/file using NEM Private Key and Transaction Hash Download a file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferType">Transfer Type default: bytes (bytes,stream,base64)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadSecureFileUsingGETAsyncWithHttpInfo (string xPvkey, string nemHash, string transferType)
        {
            // verify the required parameter 'xPvkey' is set
            if (xPvkey == null)
                throw new ApiException(400, "Missing required parameter 'xPvkey' when calling DownloadApi->DownloadSecureFileUsingGET");
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling DownloadApi->DownloadSecureFileUsingGET");
            // verify the required parameter 'transferType' is set
            if (transferType == null)
                throw new ApiException(400, "Missing required parameter 'transferType' when calling DownloadApi->DownloadSecureFileUsingGET");

            var localVarPath = "/download/secure/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarQueryParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // query parameter
            if (transferType != null) localVarQueryParams.Add("transferType", Configuration.ApiClient.ParameterToString(transferType)); // query parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadSecureFileUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download a base64 encoded plain text data using NEM Transaction Hash Download a plain text data associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream)</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadTextUsingGET (string nemHash, string transferMode)
        {
             ApiResponse<byte[]> localVarResponse = DownloadTextUsingGETWithHttpInfo(nemHash, transferMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download a base64 encoded plain text data using NEM Transaction Hash Download a plain text data associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DownloadTextUsingGETWithHttpInfo (string nemHash, string transferMode)
        {
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling DownloadApi->DownloadTextUsingGET");
            // verify the required parameter 'transferMode' is set
            if (transferMode == null)
                throw new ApiException(400, "Missing required parameter 'transferMode' when calling DownloadApi->DownloadTextUsingGET");

            var localVarPath = "/download/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarQueryParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // query parameter
            if (transferMode != null) localVarQueryParams.Add("transferMode", Configuration.ApiClient.ParameterToString(transferMode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadTextUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download a base64 encoded plain text data using NEM Transaction Hash Download a plain text data associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadTextUsingGETAsync (string nemHash, string transferMode)
        {
             ApiResponse<byte[]> localVarResponse = await DownloadTextUsingGETAsyncWithHttpInfo(nemHash, transferMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download a base64 encoded plain text data using NEM Transaction Hash Download a plain text data associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">The NEM Transaction Hash</param>
        /// <param name="transferMode">Transfer Mode default: bytes (bytes,stream)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadTextUsingGETAsyncWithHttpInfo (string nemHash, string transferMode)
        {
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling DownloadApi->DownloadTextUsingGET");
            // verify the required parameter 'transferMode' is set
            if (transferMode == null)
                throw new ApiException(400, "Missing required parameter 'transferMode' when calling DownloadApi->DownloadTextUsingGET");

            var localVarPath = "/download/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarQueryParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // query parameter
            if (transferMode != null) localVarQueryParams.Add("transferMode", Configuration.ApiClient.ParameterToString(transferMode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadTextUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download IPFS file associated to the datahash Download IPFS file associated to the datahash
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataHash">The NEM Transaction Hash</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadUsingDataHashUsingGET (string dataHash)
        {
             ApiResponse<byte[]> localVarResponse = DownloadUsingDataHashUsingGETWithHttpInfo(dataHash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download IPFS file associated to the datahash Download IPFS file associated to the datahash
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataHash">The NEM Transaction Hash</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DownloadUsingDataHashUsingGETWithHttpInfo (string dataHash)
        {
            // verify the required parameter 'dataHash' is set
            if (dataHash == null)
                throw new ApiException(400, "Missing required parameter 'dataHash' when calling DownloadApi->DownloadUsingDataHashUsingGET");

            var localVarPath = "/download/direct/datahash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataHash != null) localVarQueryParams.Add("dataHash", Configuration.ApiClient.ParameterToString(dataHash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadUsingDataHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download IPFS file associated to the datahash Download IPFS file associated to the datahash
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataHash">The NEM Transaction Hash</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadUsingDataHashUsingGETAsync (string dataHash)
        {
             ApiResponse<byte[]> localVarResponse = await DownloadUsingDataHashUsingGETAsyncWithHttpInfo(dataHash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download IPFS file associated to the datahash Download IPFS file associated to the datahash
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataHash">The NEM Transaction Hash</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadUsingDataHashUsingGETAsyncWithHttpInfo (string dataHash)
        {
            // verify the required parameter 'dataHash' is set
            if (dataHash == null)
                throw new ApiException(400, "Missing required parameter 'dataHash' when calling DownloadApi->DownloadUsingDataHashUsingGET");

            var localVarPath = "/download/direct/datahash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataHash != null) localVarQueryParams.Add("dataHash", Configuration.ApiClient.ParameterToString(dataHash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadUsingDataHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}
