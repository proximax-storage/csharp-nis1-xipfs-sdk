/* 
 * Proximax P2P Storage REST API
 *
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: alvin.reyes@botmill.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Io.Xpx.Client;
using Io.Xpx.Model;

namespace Io.Xpx.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INodeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check if the Storage Node is up and running.
        /// </summary>
        /// <remarks>
        /// This endpoint is used to check if the P2P Storage Node instance is either alive or down.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GenericResponseMessage</returns>
        GenericResponseMessage CheckNodeUsingGET ();

        /// <summary>
        /// Check if the Storage Node is up and running.
        /// </summary>
        /// <remarks>
        /// This endpoint is used to check if the P2P Storage Node instance is either alive or down.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GenericResponseMessage</returns>
        ApiResponse<GenericResponseMessage> CheckNodeUsingGETWithHttpInfo ();
        /// <summary>
        /// Get Storage Node Information
        /// </summary>
        /// <remarks>
        /// This endpoint returns the information of the P2P Storage Node
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeInfo</returns>
        NodeInfo GetNodeInfoUsingGET ();

        /// <summary>
        /// Get Storage Node Information
        /// </summary>
        /// <remarks>
        /// This endpoint returns the information of the P2P Storage Node
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeInfo</returns>
        ApiResponse<NodeInfo> GetNodeInfoUsingGETWithHttpInfo ();
        /// <summary>
        /// Get Storage Node Information
        /// </summary>
        /// <remarks>
        /// This endpoint returns the information of the P2P Storage Node
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="network">Blockchain Network</param>
        /// <param name="domain">Blockchain Network Domain (xxx.xxx.xxx)</param>
        /// <param name="port">Blockchain Network Port (xxx.xxx.xxx)</param>
        /// <returns>string</returns>
        string SetBlockchainNodeConnectionUsingPOST (string network, string domain, string port);

        /// <summary>
        /// Get Storage Node Information
        /// </summary>
        /// <remarks>
        /// This endpoint returns the information of the P2P Storage Node
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="network">Blockchain Network</param>
        /// <param name="domain">Blockchain Network Domain (xxx.xxx.xxx)</param>
        /// <param name="port">Blockchain Network Port (xxx.xxx.xxx)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetBlockchainNodeConnectionUsingPOSTWithHttpInfo (string network, string domain, string port);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Check if the Storage Node is up and running.
        /// </summary>
        /// <remarks>
        /// This endpoint is used to check if the P2P Storage Node instance is either alive or down.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GenericResponseMessage</returns>
        System.Threading.Tasks.Task<GenericResponseMessage> CheckNodeUsingGETAsync ();

        /// <summary>
        /// Check if the Storage Node is up and running.
        /// </summary>
        /// <remarks>
        /// This endpoint is used to check if the P2P Storage Node instance is either alive or down.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GenericResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericResponseMessage>> CheckNodeUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Get Storage Node Information
        /// </summary>
        /// <remarks>
        /// This endpoint returns the information of the P2P Storage Node
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NodeInfo</returns>
        System.Threading.Tasks.Task<NodeInfo> GetNodeInfoUsingGETAsync ();

        /// <summary>
        /// Get Storage Node Information
        /// </summary>
        /// <remarks>
        /// This endpoint returns the information of the P2P Storage Node
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NodeInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeInfo>> GetNodeInfoUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Get Storage Node Information
        /// </summary>
        /// <remarks>
        /// This endpoint returns the information of the P2P Storage Node
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="network">Blockchain Network</param>
        /// <param name="domain">Blockchain Network Domain (xxx.xxx.xxx)</param>
        /// <param name="port">Blockchain Network Port (xxx.xxx.xxx)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetBlockchainNodeConnectionUsingPOSTAsync (string network, string domain, string port);

        /// <summary>
        /// Get Storage Node Information
        /// </summary>
        /// <remarks>
        /// This endpoint returns the information of the P2P Storage Node
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="network">Blockchain Network</param>
        /// <param name="domain">Blockchain Network Domain (xxx.xxx.xxx)</param>
        /// <param name="port">Blockchain Network Port (xxx.xxx.xxx)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetBlockchainNodeConnectionUsingPOSTAsyncWithHttpInfo (string network, string domain, string port);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NodeApi : INodeApi
    {
        private Io.Xpx.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NodeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NodeApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NodeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Xpx.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Check if the Storage Node is up and running. This endpoint is used to check if the P2P Storage Node instance is either alive or down.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GenericResponseMessage</returns>
        public GenericResponseMessage CheckNodeUsingGET ()
        {
             ApiResponse<GenericResponseMessage> localVarResponse = CheckNodeUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if the Storage Node is up and running. This endpoint is used to check if the P2P Storage Node instance is either alive or down.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GenericResponseMessage</returns>
        public ApiResponse< GenericResponseMessage > CheckNodeUsingGETWithHttpInfo ()
        {

            var localVarPath = "/node/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckNodeUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericResponseMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericResponseMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericResponseMessage)));
        }

        /// <summary>
        /// Check if the Storage Node is up and running. This endpoint is used to check if the P2P Storage Node instance is either alive or down.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GenericResponseMessage</returns>
        public async System.Threading.Tasks.Task<GenericResponseMessage> CheckNodeUsingGETAsync ()
        {
             ApiResponse<GenericResponseMessage> localVarResponse = await CheckNodeUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if the Storage Node is up and running. This endpoint is used to check if the P2P Storage Node instance is either alive or down.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GenericResponseMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenericResponseMessage>> CheckNodeUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/node/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckNodeUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericResponseMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericResponseMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericResponseMessage)));
        }

        /// <summary>
        /// Get Storage Node Information This endpoint returns the information of the P2P Storage Node
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeInfo</returns>
        public NodeInfo GetNodeInfoUsingGET ()
        {
             ApiResponse<NodeInfo> localVarResponse = GetNodeInfoUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Storage Node Information This endpoint returns the information of the P2P Storage Node
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeInfo</returns>
        public ApiResponse< NodeInfo > GetNodeInfoUsingGETWithHttpInfo ()
        {

            var localVarPath = "/node/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeInfoUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeInfo)));
        }

        /// <summary>
        /// Get Storage Node Information This endpoint returns the information of the P2P Storage Node
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NodeInfo</returns>
        public async System.Threading.Tasks.Task<NodeInfo> GetNodeInfoUsingGETAsync ()
        {
             ApiResponse<NodeInfo> localVarResponse = await GetNodeInfoUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Storage Node Information This endpoint returns the information of the P2P Storage Node
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NodeInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeInfo>> GetNodeInfoUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/node/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeInfoUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeInfo)));
        }

        /// <summary>
        /// Get Storage Node Information This endpoint returns the information of the P2P Storage Node
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="network">Blockchain Network</param>
        /// <param name="domain">Blockchain Network Domain (xxx.xxx.xxx)</param>
        /// <param name="port">Blockchain Network Port (xxx.xxx.xxx)</param>
        /// <returns>string</returns>
        public string SetBlockchainNodeConnectionUsingPOST (string network, string domain, string port)
        {
             ApiResponse<string> localVarResponse = SetBlockchainNodeConnectionUsingPOSTWithHttpInfo(network, domain, port);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Storage Node Information This endpoint returns the information of the P2P Storage Node
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="network">Blockchain Network</param>
        /// <param name="domain">Blockchain Network Domain (xxx.xxx.xxx)</param>
        /// <param name="port">Blockchain Network Port (xxx.xxx.xxx)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetBlockchainNodeConnectionUsingPOSTWithHttpInfo (string network, string domain, string port)
        {
            // verify the required parameter 'network' is set
            if (network == null)
                throw new ApiException(400, "Missing required parameter 'network' when calling NodeApi->SetBlockchainNodeConnectionUsingPOST");
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling NodeApi->SetBlockchainNodeConnectionUsingPOST");
            // verify the required parameter 'port' is set
            if (port == null)
                throw new ApiException(400, "Missing required parameter 'port' when calling NodeApi->SetBlockchainNodeConnectionUsingPOST");

            var localVarPath = "/node/set/blockchain/connection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (network != null) localVarQueryParams.Add("network", Configuration.ApiClient.ParameterToString(network)); // query parameter
            if (domain != null) localVarQueryParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // query parameter
            if (port != null) localVarQueryParams.Add("port", Configuration.ApiClient.ParameterToString(port)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBlockchainNodeConnectionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Storage Node Information This endpoint returns the information of the P2P Storage Node
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="network">Blockchain Network</param>
        /// <param name="domain">Blockchain Network Domain (xxx.xxx.xxx)</param>
        /// <param name="port">Blockchain Network Port (xxx.xxx.xxx)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetBlockchainNodeConnectionUsingPOSTAsync (string network, string domain, string port)
        {
             ApiResponse<string> localVarResponse = await SetBlockchainNodeConnectionUsingPOSTAsyncWithHttpInfo(network, domain, port);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Storage Node Information This endpoint returns the information of the P2P Storage Node
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="network">Blockchain Network</param>
        /// <param name="domain">Blockchain Network Domain (xxx.xxx.xxx)</param>
        /// <param name="port">Blockchain Network Port (xxx.xxx.xxx)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetBlockchainNodeConnectionUsingPOSTAsyncWithHttpInfo (string network, string domain, string port)
        {
            // verify the required parameter 'network' is set
            if (network == null)
                throw new ApiException(400, "Missing required parameter 'network' when calling NodeApi->SetBlockchainNodeConnectionUsingPOST");
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling NodeApi->SetBlockchainNodeConnectionUsingPOST");
            // verify the required parameter 'port' is set
            if (port == null)
                throw new ApiException(400, "Missing required parameter 'port' when calling NodeApi->SetBlockchainNodeConnectionUsingPOST");

            var localVarPath = "/node/set/blockchain/connection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (network != null) localVarQueryParams.Add("network", Configuration.ApiClient.ParameterToString(network)); // query parameter
            if (domain != null) localVarQueryParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // query parameter
            if (port != null) localVarQueryParams.Add("port", Configuration.ApiClient.ParameterToString(port)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetBlockchainNodeConnectionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
