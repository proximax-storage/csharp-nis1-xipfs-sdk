/* 
 * Proximax P2P Storage REST API
 *
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: proximax.storage@proximax.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Io.Xpx.Client;
using Io.Xpx.Model;

namespace Io.Xpx.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>List&lt;ResourceHashMessageJsonEntity&gt;</returns>
        List<ResourceHashMessageJsonEntity> SearchTransactionWithKeywordUsingGET (string xPubkey, string keywords);

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>ApiResponse of List&lt;ResourceHashMessageJsonEntity&gt;</returns>
        ApiResponse<List<ResourceHashMessageJsonEntity>> SearchTransactionWithKeywordUsingGETWithHttpInfo (string xPubkey, string keywords);
        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="key">Meta key (optional)</param>
        /// <param name="value">Meta value (optional)</param>
        /// <returns>List&lt;ResourceHashMessageJsonEntity&gt;</returns>
        List<ResourceHashMessageJsonEntity> SearchTransactionWithMetadataUsingGET (string xPubkey, string key = null, string value = null);

        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="key">Meta key (optional)</param>
        /// <param name="value">Meta value (optional)</param>
        /// <returns>ApiResponse of List&lt;ResourceHashMessageJsonEntity&gt;</returns>
        ApiResponse<List<ResourceHashMessageJsonEntity>> SearchTransactionWithMetadataUsingGETWithHttpInfo (string xPubkey, string key = null, string value = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>Task of List&lt;ResourceHashMessageJsonEntity&gt;</returns>
        System.Threading.Tasks.Task<List<ResourceHashMessageJsonEntity>> SearchTransactionWithKeywordUsingGETAsync (string xPubkey, string keywords);

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceHashMessageJsonEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourceHashMessageJsonEntity>>> SearchTransactionWithKeywordUsingGETAsyncWithHttpInfo (string xPubkey, string keywords);
        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="key">Meta key (optional)</param>
        /// <param name="value">Meta value (optional)</param>
        /// <returns>Task of List&lt;ResourceHashMessageJsonEntity&gt;</returns>
        System.Threading.Tasks.Task<List<ResourceHashMessageJsonEntity>> SearchTransactionWithMetadataUsingGETAsync (string xPubkey, string key = null, string value = null);

        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="key">Meta key (optional)</param>
        /// <param name="value">Meta value (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceHashMessageJsonEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourceHashMessageJsonEntity>>> SearchTransactionWithMetadataUsingGETAsyncWithHttpInfo (string xPubkey, string key = null, string value = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private Io.Xpx.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Xpx.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>List&lt;ResourceHashMessageJsonEntity&gt;</returns>
        public List<ResourceHashMessageJsonEntity> SearchTransactionWithKeywordUsingGET (string xPubkey, string keywords)
        {
             ApiResponse<List<ResourceHashMessageJsonEntity>> localVarResponse = SearchTransactionWithKeywordUsingGETWithHttpInfo(xPubkey, keywords);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>ApiResponse of List&lt;ResourceHashMessageJsonEntity&gt;</returns>
        public ApiResponse< List<ResourceHashMessageJsonEntity> > SearchTransactionWithKeywordUsingGETWithHttpInfo (string xPubkey, string keywords)
        {
            // verify the required parameter 'xPubkey' is set
            if (xPubkey == null)
                throw new ApiException(400, "Missing required parameter 'xPubkey' when calling SearchApi->SearchTransactionWithKeywordUsingGET");
            // verify the required parameter 'keywords' is set
            if (keywords == null)
                throw new ApiException(400, "Missing required parameter 'keywords' when calling SearchApi->SearchTransactionWithKeywordUsingGET");

            var localVarPath = "/search/by/keywords/{keywords}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keywords != null) localVarPathParams.Add("keywords", Configuration.ApiClient.ParameterToString(keywords)); // path parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTransactionWithKeywordUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceHashMessageJsonEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResourceHashMessageJsonEntity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceHashMessageJsonEntity>)));
        }

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>Task of List&lt;ResourceHashMessageJsonEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourceHashMessageJsonEntity>> SearchTransactionWithKeywordUsingGETAsync (string xPubkey, string keywords)
        {
             ApiResponse<List<ResourceHashMessageJsonEntity>> localVarResponse = await SearchTransactionWithKeywordUsingGETAsyncWithHttpInfo(xPubkey, keywords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceHashMessageJsonEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResourceHashMessageJsonEntity>>> SearchTransactionWithKeywordUsingGETAsyncWithHttpInfo (string xPubkey, string keywords)
        {
            // verify the required parameter 'xPubkey' is set
            if (xPubkey == null)
                throw new ApiException(400, "Missing required parameter 'xPubkey' when calling SearchApi->SearchTransactionWithKeywordUsingGET");
            // verify the required parameter 'keywords' is set
            if (keywords == null)
                throw new ApiException(400, "Missing required parameter 'keywords' when calling SearchApi->SearchTransactionWithKeywordUsingGET");

            var localVarPath = "/search/by/keywords/{keywords}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keywords != null) localVarPathParams.Add("keywords", Configuration.ApiClient.ParameterToString(keywords)); // path parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTransactionWithKeywordUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceHashMessageJsonEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResourceHashMessageJsonEntity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceHashMessageJsonEntity>)));
        }

        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="key">Meta key (optional)</param>
        /// <param name="value">Meta value (optional)</param>
        /// <returns>List&lt;ResourceHashMessageJsonEntity&gt;</returns>
        public List<ResourceHashMessageJsonEntity> SearchTransactionWithMetadataUsingGET (string xPubkey, string key = null, string value = null)
        {
             ApiResponse<List<ResourceHashMessageJsonEntity>> localVarResponse = SearchTransactionWithMetadataUsingGETWithHttpInfo(xPubkey, key, value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="key">Meta key (optional)</param>
        /// <param name="value">Meta value (optional)</param>
        /// <returns>ApiResponse of List&lt;ResourceHashMessageJsonEntity&gt;</returns>
        public ApiResponse< List<ResourceHashMessageJsonEntity> > SearchTransactionWithMetadataUsingGETWithHttpInfo (string xPubkey, string key = null, string value = null)
        {
            // verify the required parameter 'xPubkey' is set
            if (xPubkey == null)
                throw new ApiException(400, "Missing required parameter 'xPubkey' when calling SearchApi->SearchTransactionWithMetadataUsingGET");

            var localVarPath = "/search/by/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTransactionWithMetadataUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceHashMessageJsonEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResourceHashMessageJsonEntity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceHashMessageJsonEntity>)));
        }

        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="key">Meta key (optional)</param>
        /// <param name="value">Meta value (optional)</param>
        /// <returns>Task of List&lt;ResourceHashMessageJsonEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourceHashMessageJsonEntity>> SearchTransactionWithMetadataUsingGETAsync (string xPubkey, string key = null, string value = null)
        {
             ApiResponse<List<ResourceHashMessageJsonEntity>> localVarResponse = await SearchTransactionWithMetadataUsingGETAsyncWithHttpInfo(xPubkey, key, value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="key">Meta key (optional)</param>
        /// <param name="value">Meta value (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceHashMessageJsonEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResourceHashMessageJsonEntity>>> SearchTransactionWithMetadataUsingGETAsyncWithHttpInfo (string xPubkey, string key = null, string value = null)
        {
            // verify the required parameter 'xPubkey' is set
            if (xPubkey == null)
                throw new ApiException(400, "Missing required parameter 'xPubkey' when calling SearchApi->SearchTransactionWithMetadataUsingGET");

            var localVarPath = "/search/by/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter
            if (value != null) localVarQueryParams.Add("value", Configuration.ApiClient.ParameterToString(value)); // query parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTransactionWithMetadataUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceHashMessageJsonEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResourceHashMessageJsonEntity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceHashMessageJsonEntity>)));
        }

    }
}
