/* 
 * Proximax P2P Storage REST API
 *
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: alvin.reyes@botmill.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Io.Xpx.Client;
using Io.Xpx.Model;

namespace Io.Xpx.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>string</returns>
        string SearchContentUsingAllNemHashUsingGET (string xPvkey, string nemHash);

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SearchContentUsingAllNemHashUsingGETWithHttpInfo (string xPvkey, string nemHash);
        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>string</returns>
        string SearchContentUsingPublicNemHashUsingGET (string xPubkey, string nemHash);

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SearchContentUsingPublicNemHashUsingGETWithHttpInfo (string xPubkey, string nemHash);
        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Text or Keyword that will be match to the files available</param>
        /// <returns>string</returns>
        string SearchContentUsingTextUsingGET (string xPubkey, string text);

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Text or Keyword that will be match to the files available</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SearchContentUsingTextUsingGETWithHttpInfo (string xPubkey, string text);
        /// <summary>
        /// Search through all the owner&#39;s documents to find the data hash that matches the nemhash specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>string</returns>
        string SearchDataHashUsingPublicNemHashUsingGET (string nemHash);

        /// <summary>
        /// Search through all the owner&#39;s documents to find the data hash that matches the nemhash specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SearchDataHashUsingPublicNemHashUsingGETWithHttpInfo (string nemHash);
        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        List<BinaryTransactionEncryptedMessage> SearchTransactionPvKeyWithKeywordUsingGET (string xPvkey, string keywords);

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>ApiResponse of List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        ApiResponse<List<BinaryTransactionEncryptedMessage>> SearchTransactionPvKeyWithKeywordUsingGETWithHttpInfo (string xPvkey, string keywords);
        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        List<BinaryTransactionEncryptedMessage> SearchTransactionWithKeywordUsingGET (string xPubkey, string keywords);

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>ApiResponse of List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        ApiResponse<List<BinaryTransactionEncryptedMessage>> SearchTransactionWithKeywordUsingGETWithHttpInfo (string xPubkey, string keywords);
        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Index-based searching on metadata</param>
        /// <returns>List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        List<BinaryTransactionEncryptedMessage> SearchTransactionWithMetadataUsingGET (string xPubkey, string text);

        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Index-based searching on metadata</param>
        /// <returns>ApiResponse of List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        ApiResponse<List<BinaryTransactionEncryptedMessage>> SearchTransactionWithMetadataUsingGETWithHttpInfo (string xPubkey, string text);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SearchContentUsingAllNemHashUsingGETAsync (string xPvkey, string nemHash);

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SearchContentUsingAllNemHashUsingGETAsyncWithHttpInfo (string xPvkey, string nemHash);
        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SearchContentUsingPublicNemHashUsingGETAsync (string xPubkey, string nemHash);

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SearchContentUsingPublicNemHashUsingGETAsyncWithHttpInfo (string xPubkey, string nemHash);
        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Text or Keyword that will be match to the files available</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SearchContentUsingTextUsingGETAsync (string xPubkey, string text);

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Text or Keyword that will be match to the files available</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SearchContentUsingTextUsingGETAsyncWithHttpInfo (string xPubkey, string text);
        /// <summary>
        /// Search through all the owner&#39;s documents to find the data hash that matches the nemhash specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SearchDataHashUsingPublicNemHashUsingGETAsync (string nemHash);

        /// <summary>
        /// Search through all the owner&#39;s documents to find the data hash that matches the nemhash specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SearchDataHashUsingPublicNemHashUsingGETAsyncWithHttpInfo (string nemHash);
        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>Task of List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        System.Threading.Tasks.Task<List<BinaryTransactionEncryptedMessage>> SearchTransactionPvKeyWithKeywordUsingGETAsync (string xPvkey, string keywords);

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>Task of ApiResponse (List&lt;BinaryTransactionEncryptedMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BinaryTransactionEncryptedMessage>>> SearchTransactionPvKeyWithKeywordUsingGETAsyncWithHttpInfo (string xPvkey, string keywords);
        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>Task of List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        System.Threading.Tasks.Task<List<BinaryTransactionEncryptedMessage>> SearchTransactionWithKeywordUsingGETAsync (string xPubkey, string keywords);

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified.
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>Task of ApiResponse (List&lt;BinaryTransactionEncryptedMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BinaryTransactionEncryptedMessage>>> SearchTransactionWithKeywordUsingGETAsyncWithHttpInfo (string xPubkey, string keywords);
        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Index-based searching on metadata</param>
        /// <returns>Task of List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        System.Threading.Tasks.Task<List<BinaryTransactionEncryptedMessage>> SearchTransactionWithMetadataUsingGETAsync (string xPubkey, string text);

        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key
        /// </summary>
        /// <remarks>
        /// This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Index-based searching on metadata</param>
        /// <returns>Task of ApiResponse (List&lt;BinaryTransactionEncryptedMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BinaryTransactionEncryptedMessage>>> SearchTransactionWithMetadataUsingGETAsyncWithHttpInfo (string xPubkey, string text);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private Io.Xpx.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Xpx.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>string</returns>
        public string SearchContentUsingAllNemHashUsingGET (string xPvkey, string nemHash)
        {
             ApiResponse<string> localVarResponse = SearchContentUsingAllNemHashUsingGETWithHttpInfo(xPvkey, nemHash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SearchContentUsingAllNemHashUsingGETWithHttpInfo (string xPvkey, string nemHash)
        {
            // verify the required parameter 'xPvkey' is set
            if (xPvkey == null)
                throw new ApiException(400, "Missing required parameter 'xPvkey' when calling SearchApi->SearchContentUsingAllNemHashUsingGET");
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling SearchApi->SearchContentUsingAllNemHashUsingGET");

            var localVarPath = "/search/all/content/hash/{nemHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarPathParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // path parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContentUsingAllNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SearchContentUsingAllNemHashUsingGETAsync (string xPvkey, string nemHash)
        {
             ApiResponse<string> localVarResponse = await SearchContentUsingAllNemHashUsingGETAsyncWithHttpInfo(xPvkey, nemHash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SearchContentUsingAllNemHashUsingGETAsyncWithHttpInfo (string xPvkey, string nemHash)
        {
            // verify the required parameter 'xPvkey' is set
            if (xPvkey == null)
                throw new ApiException(400, "Missing required parameter 'xPvkey' when calling SearchApi->SearchContentUsingAllNemHashUsingGET");
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling SearchApi->SearchContentUsingAllNemHashUsingGET");

            var localVarPath = "/search/all/content/hash/{nemHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarPathParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // path parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContentUsingAllNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>string</returns>
        public string SearchContentUsingPublicNemHashUsingGET (string xPubkey, string nemHash)
        {
             ApiResponse<string> localVarResponse = SearchContentUsingPublicNemHashUsingGETWithHttpInfo(xPubkey, nemHash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SearchContentUsingPublicNemHashUsingGETWithHttpInfo (string xPubkey, string nemHash)
        {
            // verify the required parameter 'xPubkey' is set
            if (xPubkey == null)
                throw new ApiException(400, "Missing required parameter 'xPubkey' when calling SearchApi->SearchContentUsingPublicNemHashUsingGET");
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling SearchApi->SearchContentUsingPublicNemHashUsingGET");

            var localVarPath = "/search/public/content/hash/{nemHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarPathParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // path parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContentUsingPublicNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SearchContentUsingPublicNemHashUsingGETAsync (string xPubkey, string nemHash)
        {
             ApiResponse<string> localVarResponse = await SearchContentUsingPublicNemHashUsingGETAsyncWithHttpInfo(xPubkey, nemHash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SearchContentUsingPublicNemHashUsingGETAsyncWithHttpInfo (string xPubkey, string nemHash)
        {
            // verify the required parameter 'xPubkey' is set
            if (xPubkey == null)
                throw new ApiException(400, "Missing required parameter 'xPubkey' when calling SearchApi->SearchContentUsingPublicNemHashUsingGET");
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling SearchApi->SearchContentUsingPublicNemHashUsingGET");

            var localVarPath = "/search/public/content/hash/{nemHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarPathParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // path parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContentUsingPublicNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Text or Keyword that will be match to the files available</param>
        /// <returns>string</returns>
        public string SearchContentUsingTextUsingGET (string xPubkey, string text)
        {
             ApiResponse<string> localVarResponse = SearchContentUsingTextUsingGETWithHttpInfo(xPubkey, text);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Text or Keyword that will be match to the files available</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SearchContentUsingTextUsingGETWithHttpInfo (string xPubkey, string text)
        {
            // verify the required parameter 'xPubkey' is set
            if (xPubkey == null)
                throw new ApiException(400, "Missing required parameter 'xPubkey' when calling SearchApi->SearchContentUsingTextUsingGET");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling SearchApi->SearchContentUsingTextUsingGET");

            var localVarPath = "/search/public/content/{text}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarPathParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // path parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContentUsingTextUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Text or Keyword that will be match to the files available</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SearchContentUsingTextUsingGETAsync (string xPubkey, string text)
        {
             ApiResponse<string> localVarResponse = await SearchContentUsingTextUsingGETAsyncWithHttpInfo(xPubkey, text);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Text or Keyword that will be match to the files available</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SearchContentUsingTextUsingGETAsyncWithHttpInfo (string xPubkey, string text)
        {
            // verify the required parameter 'xPubkey' is set
            if (xPubkey == null)
                throw new ApiException(400, "Missing required parameter 'xPubkey' when calling SearchApi->SearchContentUsingTextUsingGET");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling SearchApi->SearchContentUsingTextUsingGET");

            var localVarPath = "/search/public/content/{text}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarPathParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // path parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContentUsingTextUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find the data hash that matches the nemhash specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>string</returns>
        public string SearchDataHashUsingPublicNemHashUsingGET (string nemHash)
        {
             ApiResponse<string> localVarResponse = SearchDataHashUsingPublicNemHashUsingGETWithHttpInfo(nemHash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find the data hash that matches the nemhash specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SearchDataHashUsingPublicNemHashUsingGETWithHttpInfo (string nemHash)
        {
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling SearchApi->SearchDataHashUsingPublicNemHashUsingGET");

            var localVarPath = "/search/public/content/hashonly/{nemHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarPathParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDataHashUsingPublicNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find the data hash that matches the nemhash specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SearchDataHashUsingPublicNemHashUsingGETAsync (string nemHash)
        {
             ApiResponse<string> localVarResponse = await SearchDataHashUsingPublicNemHashUsingGETAsyncWithHttpInfo(nemHash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search through all the owner&#39;s documents to find the data hash that matches the nemhash specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nemHash">NEM Hash that will be matched to the files available</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SearchDataHashUsingPublicNemHashUsingGETAsyncWithHttpInfo (string nemHash)
        {
            // verify the required parameter 'nemHash' is set
            if (nemHash == null)
                throw new ApiException(400, "Missing required parameter 'nemHash' when calling SearchApi->SearchDataHashUsingPublicNemHashUsingGET");

            var localVarPath = "/search/public/content/hashonly/{nemHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nemHash != null) localVarPathParams.Add("nemHash", Configuration.ApiClient.ParameterToString(nemHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDataHashUsingPublicNemHashUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        public List<BinaryTransactionEncryptedMessage> SearchTransactionPvKeyWithKeywordUsingGET (string xPvkey, string keywords)
        {
             ApiResponse<List<BinaryTransactionEncryptedMessage>> localVarResponse = SearchTransactionPvKeyWithKeywordUsingGETWithHttpInfo(xPvkey, keywords);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>ApiResponse of List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        public ApiResponse< List<BinaryTransactionEncryptedMessage> > SearchTransactionPvKeyWithKeywordUsingGETWithHttpInfo (string xPvkey, string keywords)
        {
            // verify the required parameter 'xPvkey' is set
            if (xPvkey == null)
                throw new ApiException(400, "Missing required parameter 'xPvkey' when calling SearchApi->SearchTransactionPvKeyWithKeywordUsingGET");
            // verify the required parameter 'keywords' is set
            if (keywords == null)
                throw new ApiException(400, "Missing required parameter 'keywords' when calling SearchApi->SearchTransactionPvKeyWithKeywordUsingGET");

            var localVarPath = "/search/all/content/keyword/{keywords}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keywords != null) localVarPathParams.Add("keywords", Configuration.ApiClient.ParameterToString(keywords)); // path parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTransactionPvKeyWithKeywordUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinaryTransactionEncryptedMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BinaryTransactionEncryptedMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinaryTransactionEncryptedMessage>)));
        }

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>Task of List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<BinaryTransactionEncryptedMessage>> SearchTransactionPvKeyWithKeywordUsingGETAsync (string xPvkey, string keywords)
        {
             ApiResponse<List<BinaryTransactionEncryptedMessage>> localVarResponse = await SearchTransactionPvKeyWithKeywordUsingGETAsyncWithHttpInfo(xPvkey, keywords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN and SECURE Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">The Sender or Receiver&#39;s Private Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>Task of ApiResponse (List&lt;BinaryTransactionEncryptedMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BinaryTransactionEncryptedMessage>>> SearchTransactionPvKeyWithKeywordUsingGETAsyncWithHttpInfo (string xPvkey, string keywords)
        {
            // verify the required parameter 'xPvkey' is set
            if (xPvkey == null)
                throw new ApiException(400, "Missing required parameter 'xPvkey' when calling SearchApi->SearchTransactionPvKeyWithKeywordUsingGET");
            // verify the required parameter 'keywords' is set
            if (keywords == null)
                throw new ApiException(400, "Missing required parameter 'keywords' when calling SearchApi->SearchTransactionPvKeyWithKeywordUsingGET");

            var localVarPath = "/search/all/content/keyword/{keywords}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keywords != null) localVarPathParams.Add("keywords", Configuration.ApiClient.ParameterToString(keywords)); // path parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTransactionPvKeyWithKeywordUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinaryTransactionEncryptedMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BinaryTransactionEncryptedMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinaryTransactionEncryptedMessage>)));
        }

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        public List<BinaryTransactionEncryptedMessage> SearchTransactionWithKeywordUsingGET (string xPubkey, string keywords)
        {
             ApiResponse<List<BinaryTransactionEncryptedMessage>> localVarResponse = SearchTransactionWithKeywordUsingGETWithHttpInfo(xPubkey, keywords);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>ApiResponse of List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        public ApiResponse< List<BinaryTransactionEncryptedMessage> > SearchTransactionWithKeywordUsingGETWithHttpInfo (string xPubkey, string keywords)
        {
            // verify the required parameter 'xPubkey' is set
            if (xPubkey == null)
                throw new ApiException(400, "Missing required parameter 'xPubkey' when calling SearchApi->SearchTransactionWithKeywordUsingGET");
            // verify the required parameter 'keywords' is set
            if (keywords == null)
                throw new ApiException(400, "Missing required parameter 'keywords' when calling SearchApi->SearchTransactionWithKeywordUsingGET");

            var localVarPath = "/search/public/content/keyword/{keywords}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keywords != null) localVarPathParams.Add("keywords", Configuration.ApiClient.ParameterToString(keywords)); // path parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTransactionWithKeywordUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinaryTransactionEncryptedMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BinaryTransactionEncryptedMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinaryTransactionEncryptedMessage>)));
        }

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>Task of List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<BinaryTransactionEncryptedMessage>> SearchTransactionWithKeywordUsingGETAsync (string xPubkey, string keywords)
        {
             ApiResponse<List<BinaryTransactionEncryptedMessage>> localVarResponse = await SearchTransactionWithKeywordUsingGETAsyncWithHttpInfo(xPubkey, keywords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search through all the owners documents to find a content that matches the text specified. This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="keywords">Comma delimited Keyword that will be match to the files available</param>
        /// <returns>Task of ApiResponse (List&lt;BinaryTransactionEncryptedMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BinaryTransactionEncryptedMessage>>> SearchTransactionWithKeywordUsingGETAsyncWithHttpInfo (string xPubkey, string keywords)
        {
            // verify the required parameter 'xPubkey' is set
            if (xPubkey == null)
                throw new ApiException(400, "Missing required parameter 'xPubkey' when calling SearchApi->SearchTransactionWithKeywordUsingGET");
            // verify the required parameter 'keywords' is set
            if (keywords == null)
                throw new ApiException(400, "Missing required parameter 'keywords' when calling SearchApi->SearchTransactionWithKeywordUsingGET");

            var localVarPath = "/search/public/content/keyword/{keywords}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keywords != null) localVarPathParams.Add("keywords", Configuration.ApiClient.ParameterToString(keywords)); // path parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTransactionWithKeywordUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinaryTransactionEncryptedMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BinaryTransactionEncryptedMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinaryTransactionEncryptedMessage>)));
        }

        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Index-based searching on metadata</param>
        /// <returns>List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        public List<BinaryTransactionEncryptedMessage> SearchTransactionWithMetadataUsingGET (string xPubkey, string text)
        {
             ApiResponse<List<BinaryTransactionEncryptedMessage>> localVarResponse = SearchTransactionWithMetadataUsingGETWithHttpInfo(xPubkey, text);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Index-based searching on metadata</param>
        /// <returns>ApiResponse of List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        public ApiResponse< List<BinaryTransactionEncryptedMessage> > SearchTransactionWithMetadataUsingGETWithHttpInfo (string xPubkey, string text)
        {
            // verify the required parameter 'xPubkey' is set
            if (xPubkey == null)
                throw new ApiException(400, "Missing required parameter 'xPubkey' when calling SearchApi->SearchTransactionWithMetadataUsingGET");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling SearchApi->SearchTransactionWithMetadataUsingGET");

            var localVarPath = "/search/public/content/metadata/{text}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarPathParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // path parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTransactionWithMetadataUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinaryTransactionEncryptedMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BinaryTransactionEncryptedMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinaryTransactionEncryptedMessage>)));
        }

        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Index-based searching on metadata</param>
        /// <returns>Task of List&lt;BinaryTransactionEncryptedMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<BinaryTransactionEncryptedMessage>> SearchTransactionWithMetadataUsingGETAsync (string xPubkey, string text)
        {
             ApiResponse<List<BinaryTransactionEncryptedMessage>> localVarResponse = await SearchTransactionWithMetadataUsingGETAsyncWithHttpInfo(xPubkey, text);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search through all the owners documents to find a key that matches the specified parameter key This endpoint can only be used to look up publicly available resources (PLAIN Message Types).
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPubkey">The Sender or Receiver&#39;s Public Key</param>
        /// <param name="text">Index-based searching on metadata</param>
        /// <returns>Task of ApiResponse (List&lt;BinaryTransactionEncryptedMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BinaryTransactionEncryptedMessage>>> SearchTransactionWithMetadataUsingGETAsyncWithHttpInfo (string xPubkey, string text)
        {
            // verify the required parameter 'xPubkey' is set
            if (xPubkey == null)
                throw new ApiException(400, "Missing required parameter 'xPubkey' when calling SearchApi->SearchTransactionWithMetadataUsingGET");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling SearchApi->SearchTransactionWithMetadataUsingGET");

            var localVarPath = "/search/public/content/metadata/{text}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarPathParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // path parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTransactionWithMetadataUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BinaryTransactionEncryptedMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BinaryTransactionEncryptedMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BinaryTransactionEncryptedMessage>)));
        }

    }
}
