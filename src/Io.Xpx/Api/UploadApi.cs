/* 
 * Proximax P2P Storage REST API
 *
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: proximax.storage@proximax.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Io.Xpx.Client;
using Io.Xpx.Model;

namespace Io.Xpx.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUploadApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Calls the garbage clean up and tries to unpin the given hash
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generates the datahash and uploads the file in the process.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multihash">The pinned multihash</param>
        /// <returns>string</returns>
        string CleanupPinnedContentUsingPOST (string multihash);

        /// <summary>
        /// Calls the garbage clean up and tries to unpin the given hash
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generates the datahash and uploads the file in the process.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multihash">The pinned multihash</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CleanupPinnedContentUsingPOSTWithHttpInfo (string multihash);
        /// <summary>
        /// Grabs a zip file with static content, extract and load directory to the IPFS/P2P Network
        /// </summary>
        /// <remarks>
        /// Generates the Root hash of your directory.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Base64 byte[] representation of the data object to be uploaded</param>
        /// <param name="name">Custom Name of the data. If none is specified, timestamp will be used. (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Additional data in a JSON Format (optional)</param>
        /// <returns>string</returns>
        string DirectoryExtractUsingPOST (System.IO.Stream file, string name = null, string keywords = null, string metadata = null);

        /// <summary>
        /// Grabs a zip file with static content, extract and load directory to the IPFS/P2P Network
        /// </summary>
        /// <remarks>
        /// Generates the Root hash of your directory.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Base64 byte[] representation of the data object to be uploaded</param>
        /// <param name="name">Custom Name of the data. If none is specified, timestamp will be used. (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Additional data in a JSON Format (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DirectoryExtractUsingPOSTWithHttpInfo (System.IO.Stream file, string name = null, string keywords = null, string metadata = null);
        /// <summary>
        /// Uploads a Base64 encoded String binary file to the IPFS/P2P Storage Network
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBase64BinaryRequestParameter">Base64 String representation of the data object to be uploaded</param>
        /// <returns>Object</returns>
        Object UploadBase64StringBinaryUsingPOST (UploadBase64BinaryRequestParameter uploadBase64BinaryRequestParameter);

        /// <summary>
        /// Uploads a Base64 encoded String binary file to the IPFS/P2P Storage Network
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBase64BinaryRequestParameter">Base64 String representation of the data object to be uploaded</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UploadBase64StringBinaryUsingPOSTWithHttpInfo (UploadBase64BinaryRequestParameter uploadBase64BinaryRequestParameter);
        /// <summary>
        /// Uploads a Base64 encoded byte[] binary file to the IPFS/P2P Storage Network
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBytesBinaryRequestParameter">Base64 byte[] representation of the data object to be uploaded</param>
        /// <returns>Object</returns>
        Object UploadBytesBinaryUsingPOST (UploadBytesBinaryRequestParameter uploadBytesBinaryRequestParameter);

        /// <summary>
        /// Uploads a Base64 encoded byte[] binary file to the IPFS/P2P Storage Network
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBytesBinaryRequestParameter">Base64 byte[] representation of the data object to be uploaded</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UploadBytesBinaryUsingPOSTWithHttpInfo (UploadBytesBinaryRequestParameter uploadBytesBinaryRequestParameter);
        /// <summary>
        /// uploadGenerateAndSign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">Sender Private Key (optional)</param>
        /// <param name="xPubkey">Receiver Public Key (optional)</param>
        /// <param name="messageType">Message Type ( PLAIN or SECURE ) (optional)</param>
        /// <param name="file">The Multipart File (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Json Format Data Structure (optional)</param>
        /// <returns>string</returns>
        string UploadGenerateAndSignUsingPOST (string xPvkey = null, string xPubkey = null, string messageType = null, System.IO.Stream file = null, string keywords = null, string metadata = null);

        /// <summary>
        /// uploadGenerateAndSign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">Sender Private Key (optional)</param>
        /// <param name="xPubkey">Receiver Public Key (optional)</param>
        /// <param name="messageType">Message Type ( PLAIN or SECURE ) (optional)</param>
        /// <param name="file">The Multipart File (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Json Format Data Structure (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> UploadGenerateAndSignUsingPOSTWithHttpInfo (string xPvkey = null, string xPubkey = null, string messageType = null, System.IO.Stream file = null, string keywords = null, string metadata = null);
        /// <summary>
        /// Upload the Text to the IPFS/P2P Storage Network
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTextParameter">A Plain Text</param>
        /// <returns>Object</returns>
        Object UploadPlainTextUsingPOST (UploadTextRequestParameter uploadTextParameter);

        /// <summary>
        /// Upload the Text to the IPFS/P2P Storage Network
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTextParameter">A Plain Text</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UploadPlainTextUsingPOSTWithHttpInfo (UploadTextRequestParameter uploadTextParameter);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Calls the garbage clean up and tries to unpin the given hash
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generates the datahash and uploads the file in the process.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multihash">The pinned multihash</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CleanupPinnedContentUsingPOSTAsync (string multihash);

        /// <summary>
        /// Calls the garbage clean up and tries to unpin the given hash
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generates the datahash and uploads the file in the process.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multihash">The pinned multihash</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CleanupPinnedContentUsingPOSTAsyncWithHttpInfo (string multihash);
        /// <summary>
        /// Grabs a zip file with static content, extract and load directory to the IPFS/P2P Network
        /// </summary>
        /// <remarks>
        /// Generates the Root hash of your directory.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Base64 byte[] representation of the data object to be uploaded</param>
        /// <param name="name">Custom Name of the data. If none is specified, timestamp will be used. (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Additional data in a JSON Format (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DirectoryExtractUsingPOSTAsync (System.IO.Stream file, string name = null, string keywords = null, string metadata = null);

        /// <summary>
        /// Grabs a zip file with static content, extract and load directory to the IPFS/P2P Network
        /// </summary>
        /// <remarks>
        /// Generates the Root hash of your directory.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Base64 byte[] representation of the data object to be uploaded</param>
        /// <param name="name">Custom Name of the data. If none is specified, timestamp will be used. (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Additional data in a JSON Format (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DirectoryExtractUsingPOSTAsyncWithHttpInfo (System.IO.Stream file, string name = null, string keywords = null, string metadata = null);
        /// <summary>
        /// Uploads a Base64 encoded String binary file to the IPFS/P2P Storage Network
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBase64BinaryRequestParameter">Base64 String representation of the data object to be uploaded</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UploadBase64StringBinaryUsingPOSTAsync (UploadBase64BinaryRequestParameter uploadBase64BinaryRequestParameter);

        /// <summary>
        /// Uploads a Base64 encoded String binary file to the IPFS/P2P Storage Network
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBase64BinaryRequestParameter">Base64 String representation of the data object to be uploaded</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadBase64StringBinaryUsingPOSTAsyncWithHttpInfo (UploadBase64BinaryRequestParameter uploadBase64BinaryRequestParameter);
        /// <summary>
        /// Uploads a Base64 encoded byte[] binary file to the IPFS/P2P Storage Network
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBytesBinaryRequestParameter">Base64 byte[] representation of the data object to be uploaded</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UploadBytesBinaryUsingPOSTAsync (UploadBytesBinaryRequestParameter uploadBytesBinaryRequestParameter);

        /// <summary>
        /// Uploads a Base64 encoded byte[] binary file to the IPFS/P2P Storage Network
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBytesBinaryRequestParameter">Base64 byte[] representation of the data object to be uploaded</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadBytesBinaryUsingPOSTAsyncWithHttpInfo (UploadBytesBinaryRequestParameter uploadBytesBinaryRequestParameter);
        /// <summary>
        /// uploadGenerateAndSign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">Sender Private Key (optional)</param>
        /// <param name="xPubkey">Receiver Public Key (optional)</param>
        /// <param name="messageType">Message Type ( PLAIN or SECURE ) (optional)</param>
        /// <param name="file">The Multipart File (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Json Format Data Structure (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> UploadGenerateAndSignUsingPOSTAsync (string xPvkey = null, string xPubkey = null, string messageType = null, System.IO.Stream file = null, string keywords = null, string metadata = null);

        /// <summary>
        /// uploadGenerateAndSign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">Sender Private Key (optional)</param>
        /// <param name="xPubkey">Receiver Public Key (optional)</param>
        /// <param name="messageType">Message Type ( PLAIN or SECURE ) (optional)</param>
        /// <param name="file">The Multipart File (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Json Format Data Structure (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> UploadGenerateAndSignUsingPOSTAsyncWithHttpInfo (string xPvkey = null, string xPubkey = null, string messageType = null, System.IO.Stream file = null, string keywords = null, string metadata = null);
        /// <summary>
        /// Upload the Text to the IPFS/P2P Storage Network
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTextParameter">A Plain Text</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UploadPlainTextUsingPOSTAsync (UploadTextRequestParameter uploadTextParameter);

        /// <summary>
        /// Upload the Text to the IPFS/P2P Storage Network
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </remarks>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTextParameter">A Plain Text</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadPlainTextUsingPOSTAsyncWithHttpInfo (UploadTextRequestParameter uploadTextParameter);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UploadApi : IUploadApi
    {
        private Io.Xpx.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UploadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UploadApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UploadApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UploadApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Io.Xpx.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Xpx.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Calls the garbage clean up and tries to unpin the given hash This endpoint can be used to generates the datahash and uploads the file in the process.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multihash">The pinned multihash</param>
        /// <returns>string</returns>
        public string CleanupPinnedContentUsingPOST (string multihash)
        {
             ApiResponse<string> localVarResponse = CleanupPinnedContentUsingPOSTWithHttpInfo(multihash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calls the garbage clean up and tries to unpin the given hash This endpoint can be used to generates the datahash and uploads the file in the process.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multihash">The pinned multihash</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CleanupPinnedContentUsingPOSTWithHttpInfo (string multihash)
        {
            // verify the required parameter 'multihash' is set
            if (multihash == null)
                throw new ApiException(400, "Missing required parameter 'multihash' when calling UploadApi->CleanupPinnedContentUsingPOST");

            var localVarPath = "/upload/cleanup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (multihash != null) localVarQueryParams.Add("multihash", Configuration.ApiClient.ParameterToString(multihash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CleanupPinnedContentUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Calls the garbage clean up and tries to unpin the given hash This endpoint can be used to generates the datahash and uploads the file in the process.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multihash">The pinned multihash</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CleanupPinnedContentUsingPOSTAsync (string multihash)
        {
             ApiResponse<string> localVarResponse = await CleanupPinnedContentUsingPOSTAsyncWithHttpInfo(multihash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calls the garbage clean up and tries to unpin the given hash This endpoint can be used to generates the datahash and uploads the file in the process.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multihash">The pinned multihash</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CleanupPinnedContentUsingPOSTAsyncWithHttpInfo (string multihash)
        {
            // verify the required parameter 'multihash' is set
            if (multihash == null)
                throw new ApiException(400, "Missing required parameter 'multihash' when calling UploadApi->CleanupPinnedContentUsingPOST");

            var localVarPath = "/upload/cleanup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (multihash != null) localVarQueryParams.Add("multihash", Configuration.ApiClient.ParameterToString(multihash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CleanupPinnedContentUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Grabs a zip file with static content, extract and load directory to the IPFS/P2P Network Generates the Root hash of your directory.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Base64 byte[] representation of the data object to be uploaded</param>
        /// <param name="name">Custom Name of the data. If none is specified, timestamp will be used. (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Additional data in a JSON Format (optional)</param>
        /// <returns>string</returns>
        public string DirectoryExtractUsingPOST (System.IO.Stream file, string name = null, string keywords = null, string metadata = null)
        {
             ApiResponse<string> localVarResponse = DirectoryExtractUsingPOSTWithHttpInfo(file, name, keywords, metadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Grabs a zip file with static content, extract and load directory to the IPFS/P2P Network Generates the Root hash of your directory.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Base64 byte[] representation of the data object to be uploaded</param>
        /// <param name="name">Custom Name of the data. If none is specified, timestamp will be used. (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Additional data in a JSON Format (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DirectoryExtractUsingPOSTWithHttpInfo (System.IO.Stream file, string name = null, string keywords = null, string metadata = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling UploadApi->DirectoryExtractUsingPOST");

            var localVarPath = "/upload/dir/extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (keywords != null) localVarQueryParams.Add("keywords", Configuration.ApiClient.ParameterToString(keywords)); // query parameter
            if (metadata != null) localVarQueryParams.Add("metadata", Configuration.ApiClient.ParameterToString(metadata)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectoryExtractUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Grabs a zip file with static content, extract and load directory to the IPFS/P2P Network Generates the Root hash of your directory.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Base64 byte[] representation of the data object to be uploaded</param>
        /// <param name="name">Custom Name of the data. If none is specified, timestamp will be used. (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Additional data in a JSON Format (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DirectoryExtractUsingPOSTAsync (System.IO.Stream file, string name = null, string keywords = null, string metadata = null)
        {
             ApiResponse<string> localVarResponse = await DirectoryExtractUsingPOSTAsyncWithHttpInfo(file, name, keywords, metadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Grabs a zip file with static content, extract and load directory to the IPFS/P2P Network Generates the Root hash of your directory.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Base64 byte[] representation of the data object to be uploaded</param>
        /// <param name="name">Custom Name of the data. If none is specified, timestamp will be used. (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Additional data in a JSON Format (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DirectoryExtractUsingPOSTAsyncWithHttpInfo (System.IO.Stream file, string name = null, string keywords = null, string metadata = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling UploadApi->DirectoryExtractUsingPOST");

            var localVarPath = "/upload/dir/extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (keywords != null) localVarQueryParams.Add("keywords", Configuration.ApiClient.ParameterToString(keywords)); // query parameter
            if (metadata != null) localVarQueryParams.Add("metadata", Configuration.ApiClient.ParameterToString(metadata)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectoryExtractUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Uploads a Base64 encoded String binary file to the IPFS/P2P Storage Network This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBase64BinaryRequestParameter">Base64 String representation of the data object to be uploaded</param>
        /// <returns>Object</returns>
        public Object UploadBase64StringBinaryUsingPOST (UploadBase64BinaryRequestParameter uploadBase64BinaryRequestParameter)
        {
             ApiResponse<Object> localVarResponse = UploadBase64StringBinaryUsingPOSTWithHttpInfo(uploadBase64BinaryRequestParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads a Base64 encoded String binary file to the IPFS/P2P Storage Network This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBase64BinaryRequestParameter">Base64 String representation of the data object to be uploaded</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UploadBase64StringBinaryUsingPOSTWithHttpInfo (UploadBase64BinaryRequestParameter uploadBase64BinaryRequestParameter)
        {
            // verify the required parameter 'uploadBase64BinaryRequestParameter' is set
            if (uploadBase64BinaryRequestParameter == null)
                throw new ApiException(400, "Missing required parameter 'uploadBase64BinaryRequestParameter' when calling UploadApi->UploadBase64StringBinaryUsingPOST");

            var localVarPath = "/upload/base64/binary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadBase64BinaryRequestParameter != null && uploadBase64BinaryRequestParameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(uploadBase64BinaryRequestParameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadBase64BinaryRequestParameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadBase64StringBinaryUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Uploads a Base64 encoded String binary file to the IPFS/P2P Storage Network This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBase64BinaryRequestParameter">Base64 String representation of the data object to be uploaded</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UploadBase64StringBinaryUsingPOSTAsync (UploadBase64BinaryRequestParameter uploadBase64BinaryRequestParameter)
        {
             ApiResponse<Object> localVarResponse = await UploadBase64StringBinaryUsingPOSTAsyncWithHttpInfo(uploadBase64BinaryRequestParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads a Base64 encoded String binary file to the IPFS/P2P Storage Network This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBase64BinaryRequestParameter">Base64 String representation of the data object to be uploaded</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadBase64StringBinaryUsingPOSTAsyncWithHttpInfo (UploadBase64BinaryRequestParameter uploadBase64BinaryRequestParameter)
        {
            // verify the required parameter 'uploadBase64BinaryRequestParameter' is set
            if (uploadBase64BinaryRequestParameter == null)
                throw new ApiException(400, "Missing required parameter 'uploadBase64BinaryRequestParameter' when calling UploadApi->UploadBase64StringBinaryUsingPOST");

            var localVarPath = "/upload/base64/binary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadBase64BinaryRequestParameter != null && uploadBase64BinaryRequestParameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(uploadBase64BinaryRequestParameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadBase64BinaryRequestParameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadBase64StringBinaryUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Uploads a Base64 encoded byte[] binary file to the IPFS/P2P Storage Network This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBytesBinaryRequestParameter">Base64 byte[] representation of the data object to be uploaded</param>
        /// <returns>Object</returns>
        public Object UploadBytesBinaryUsingPOST (UploadBytesBinaryRequestParameter uploadBytesBinaryRequestParameter)
        {
             ApiResponse<Object> localVarResponse = UploadBytesBinaryUsingPOSTWithHttpInfo(uploadBytesBinaryRequestParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads a Base64 encoded byte[] binary file to the IPFS/P2P Storage Network This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBytesBinaryRequestParameter">Base64 byte[] representation of the data object to be uploaded</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UploadBytesBinaryUsingPOSTWithHttpInfo (UploadBytesBinaryRequestParameter uploadBytesBinaryRequestParameter)
        {
            // verify the required parameter 'uploadBytesBinaryRequestParameter' is set
            if (uploadBytesBinaryRequestParameter == null)
                throw new ApiException(400, "Missing required parameter 'uploadBytesBinaryRequestParameter' when calling UploadApi->UploadBytesBinaryUsingPOST");

            var localVarPath = "/upload/bytes/binary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadBytesBinaryRequestParameter != null && uploadBytesBinaryRequestParameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(uploadBytesBinaryRequestParameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadBytesBinaryRequestParameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadBytesBinaryUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Uploads a Base64 encoded byte[] binary file to the IPFS/P2P Storage Network This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBytesBinaryRequestParameter">Base64 byte[] representation of the data object to be uploaded</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UploadBytesBinaryUsingPOSTAsync (UploadBytesBinaryRequestParameter uploadBytesBinaryRequestParameter)
        {
             ApiResponse<Object> localVarResponse = await UploadBytesBinaryUsingPOSTAsyncWithHttpInfo(uploadBytesBinaryRequestParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads a Base64 encoded byte[] binary file to the IPFS/P2P Storage Network This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadBytesBinaryRequestParameter">Base64 byte[] representation of the data object to be uploaded</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadBytesBinaryUsingPOSTAsyncWithHttpInfo (UploadBytesBinaryRequestParameter uploadBytesBinaryRequestParameter)
        {
            // verify the required parameter 'uploadBytesBinaryRequestParameter' is set
            if (uploadBytesBinaryRequestParameter == null)
                throw new ApiException(400, "Missing required parameter 'uploadBytesBinaryRequestParameter' when calling UploadApi->UploadBytesBinaryUsingPOST");

            var localVarPath = "/upload/bytes/binary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadBytesBinaryRequestParameter != null && uploadBytesBinaryRequestParameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(uploadBytesBinaryRequestParameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadBytesBinaryRequestParameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadBytesBinaryUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// uploadGenerateAndSign 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">Sender Private Key (optional)</param>
        /// <param name="xPubkey">Receiver Public Key (optional)</param>
        /// <param name="messageType">Message Type ( PLAIN or SECURE ) (optional)</param>
        /// <param name="file">The Multipart File (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Json Format Data Structure (optional)</param>
        /// <returns>string</returns>
        public string UploadGenerateAndSignUsingPOST (string xPvkey = null, string xPubkey = null, string messageType = null, System.IO.Stream file = null, string keywords = null, string metadata = null)
        {
             ApiResponse<string> localVarResponse = UploadGenerateAndSignUsingPOSTWithHttpInfo(xPvkey, xPubkey, messageType, file, keywords, metadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// uploadGenerateAndSign 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">Sender Private Key (optional)</param>
        /// <param name="xPubkey">Receiver Public Key (optional)</param>
        /// <param name="messageType">Message Type ( PLAIN or SECURE ) (optional)</param>
        /// <param name="file">The Multipart File (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Json Format Data Structure (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > UploadGenerateAndSignUsingPOSTWithHttpInfo (string xPvkey = null, string xPubkey = null, string messageType = null, System.IO.Stream file = null, string keywords = null, string metadata = null)
        {

            var localVarPath = "/upload/generate-sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageType != null) localVarQueryParams.Add("messageType", Configuration.ApiClient.ParameterToString(messageType)); // query parameter
            if (keywords != null) localVarQueryParams.Add("keywords", Configuration.ApiClient.ParameterToString(keywords)); // query parameter
            if (metadata != null) localVarQueryParams.Add("metadata", Configuration.ApiClient.ParameterToString(metadata)); // query parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadGenerateAndSignUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// uploadGenerateAndSign 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">Sender Private Key (optional)</param>
        /// <param name="xPubkey">Receiver Public Key (optional)</param>
        /// <param name="messageType">Message Type ( PLAIN or SECURE ) (optional)</param>
        /// <param name="file">The Multipart File (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Json Format Data Structure (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> UploadGenerateAndSignUsingPOSTAsync (string xPvkey = null, string xPubkey = null, string messageType = null, System.IO.Stream file = null, string keywords = null, string metadata = null)
        {
             ApiResponse<string> localVarResponse = await UploadGenerateAndSignUsingPOSTAsyncWithHttpInfo(xPvkey, xPubkey, messageType, file, keywords, metadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// uploadGenerateAndSign 
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPvkey">Sender Private Key (optional)</param>
        /// <param name="xPubkey">Receiver Public Key (optional)</param>
        /// <param name="messageType">Message Type ( PLAIN or SECURE ) (optional)</param>
        /// <param name="file">The Multipart File (optional)</param>
        /// <param name="keywords">Comma delimited Keyword/Tags (optional)</param>
        /// <param name="metadata">Json Format Data Structure (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> UploadGenerateAndSignUsingPOSTAsyncWithHttpInfo (string xPvkey = null, string xPubkey = null, string messageType = null, System.IO.Stream file = null, string keywords = null, string metadata = null)
        {

            var localVarPath = "/upload/generate-sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageType != null) localVarQueryParams.Add("messageType", Configuration.ApiClient.ParameterToString(messageType)); // query parameter
            if (keywords != null) localVarQueryParams.Add("keywords", Configuration.ApiClient.ParameterToString(keywords)); // query parameter
            if (metadata != null) localVarQueryParams.Add("metadata", Configuration.ApiClient.ParameterToString(metadata)); // query parameter
            if (xPvkey != null) localVarHeaderParams.Add("x-pvkey", Configuration.ApiClient.ParameterToString(xPvkey)); // header parameter
            if (xPubkey != null) localVarHeaderParams.Add("x-pubkey", Configuration.ApiClient.ParameterToString(xPubkey)); // header parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadGenerateAndSignUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Upload the Text to the IPFS/P2P Storage Network This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTextParameter">A Plain Text</param>
        /// <returns>Object</returns>
        public Object UploadPlainTextUsingPOST (UploadTextRequestParameter uploadTextParameter)
        {
             ApiResponse<Object> localVarResponse = UploadPlainTextUsingPOSTWithHttpInfo(uploadTextParameter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload the Text to the IPFS/P2P Storage Network This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTextParameter">A Plain Text</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UploadPlainTextUsingPOSTWithHttpInfo (UploadTextRequestParameter uploadTextParameter)
        {
            // verify the required parameter 'uploadTextParameter' is set
            if (uploadTextParameter == null)
                throw new ApiException(400, "Missing required parameter 'uploadTextParameter' when calling UploadApi->UploadPlainTextUsingPOST");

            var localVarPath = "/upload/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadTextParameter != null && uploadTextParameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(uploadTextParameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadTextParameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadPlainTextUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Upload the Text to the IPFS/P2P Storage Network This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTextParameter">A Plain Text</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UploadPlainTextUsingPOSTAsync (UploadTextRequestParameter uploadTextParameter)
        {
             ApiResponse<Object> localVarResponse = await UploadPlainTextUsingPOSTAsyncWithHttpInfo(uploadTextParameter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload the Text to the IPFS/P2P Storage Network This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
        /// </summary>
        /// <exception cref="Io.Xpx.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadTextParameter">A Plain Text</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadPlainTextUsingPOSTAsyncWithHttpInfo (UploadTextRequestParameter uploadTextParameter)
        {
            // verify the required parameter 'uploadTextParameter' is set
            if (uploadTextParameter == null)
                throw new ApiException(400, "Missing required parameter 'uploadTextParameter' when calling UploadApi->UploadPlainTextUsingPOST");

            var localVarPath = "/upload/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uploadTextParameter != null && uploadTextParameter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(uploadTextParameter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uploadTextParameter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadPlainTextUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
