/* 
 * Proximax P2P Storage REST API
 *
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: proximax.storage@proximax.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Io.Xpx.Client.SwaggerDateConverter;

namespace Io.Xpx.Model
{
    /// <summary>
    /// AccountInfo
    /// </summary>
    [DataContract]
    public partial class AccountInfo :  IEquatable<AccountInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountInfo" /> class.
        /// </summary>
        /// <param name="Address">Address.</param>
        /// <param name="Balance">Balance.</param>
        /// <param name="Importance">Importance.</param>
        /// <param name="KeyPair">KeyPair.</param>
        /// <param name="Label">Label.</param>
        /// <param name="MultisigInfo">MultisigInfo.</param>
        /// <param name="NumHarvestedBlocks">NumHarvestedBlocks.</param>
        /// <param name="VestedBalance">VestedBalance.</param>
        public AccountInfo(Address Address = default(Address), Amount Balance = default(Amount), double? Importance = default(double?), KeyPair KeyPair = default(KeyPair), string Label = default(string), MultisigInfo MultisigInfo = default(MultisigInfo), BlockAmount NumHarvestedBlocks = default(BlockAmount), Amount VestedBalance = default(Amount))
        {
            this.Address = Address;
            this.Balance = Balance;
            this.Importance = Importance;
            this.KeyPair = KeyPair;
            this.Label = Label;
            this.MultisigInfo = MultisigInfo;
            this.NumHarvestedBlocks = NumHarvestedBlocks;
            this.VestedBalance = VestedBalance;
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public Amount Balance { get; set; }

        /// <summary>
        /// Gets or Sets Importance
        /// </summary>
        [DataMember(Name="importance", EmitDefaultValue=false)]
        public double? Importance { get; set; }

        /// <summary>
        /// Gets or Sets KeyPair
        /// </summary>
        [DataMember(Name="keyPair", EmitDefaultValue=false)]
        public KeyPair KeyPair { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets MultisigInfo
        /// </summary>
        [DataMember(Name="multisigInfo", EmitDefaultValue=false)]
        public MultisigInfo MultisigInfo { get; set; }

        /// <summary>
        /// Gets or Sets NumHarvestedBlocks
        /// </summary>
        [DataMember(Name="numHarvestedBlocks", EmitDefaultValue=false)]
        public BlockAmount NumHarvestedBlocks { get; set; }

        /// <summary>
        /// Gets or Sets VestedBalance
        /// </summary>
        [DataMember(Name="vestedBalance", EmitDefaultValue=false)]
        public Amount VestedBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountInfo {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Importance: ").Append(Importance).Append("\n");
            sb.Append("  KeyPair: ").Append(KeyPair).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  MultisigInfo: ").Append(MultisigInfo).Append("\n");
            sb.Append("  NumHarvestedBlocks: ").Append(NumHarvestedBlocks).Append("\n");
            sb.Append("  VestedBalance: ").Append(VestedBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AccountInfo);
        }

        /// <summary>
        /// Returns true if AccountInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.Balance == other.Balance ||
                    this.Balance != null &&
                    this.Balance.Equals(other.Balance)
                ) && 
                (
                    this.Importance == other.Importance ||
                    this.Importance != null &&
                    this.Importance.Equals(other.Importance)
                ) && 
                (
                    this.KeyPair == other.KeyPair ||
                    this.KeyPair != null &&
                    this.KeyPair.Equals(other.KeyPair)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.MultisigInfo == other.MultisigInfo ||
                    this.MultisigInfo != null &&
                    this.MultisigInfo.Equals(other.MultisigInfo)
                ) && 
                (
                    this.NumHarvestedBlocks == other.NumHarvestedBlocks ||
                    this.NumHarvestedBlocks != null &&
                    this.NumHarvestedBlocks.Equals(other.NumHarvestedBlocks)
                ) && 
                (
                    this.VestedBalance == other.VestedBalance ||
                    this.VestedBalance != null &&
                    this.VestedBalance.Equals(other.VestedBalance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.Balance != null)
                    hash = hash * 59 + this.Balance.GetHashCode();
                if (this.Importance != null)
                    hash = hash * 59 + this.Importance.GetHashCode();
                if (this.KeyPair != null)
                    hash = hash * 59 + this.KeyPair.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.MultisigInfo != null)
                    hash = hash * 59 + this.MultisigInfo.GetHashCode();
                if (this.NumHarvestedBlocks != null)
                    hash = hash * 59 + this.NumHarvestedBlocks.GetHashCode();
                if (this.VestedBalance != null)
                    hash = hash * 59 + this.VestedBalance.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
