/* 
 * Proximax P2P Storage REST API
 *
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: alvin.reyes@botmill.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Io.Xpx.Client.SwaggerDateConverter;

namespace Io.Xpx.Model
{
    /// <summary>
    /// NodeInfo
    /// </summary>
    [DataContract]
    public partial class NodeInfo :  IEquatable<NodeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeInfo" /> class.
        /// </summary>
        /// <param name="ContextUri">ContextUri.</param>
        /// <param name="NemAddress">NemAddress.</param>
        /// <param name="Network">Network.</param>
        /// <param name="NetworkAddress">NetworkAddress.</param>
        /// <param name="NetworkPort">NetworkPort.</param>
        /// <param name="PeerId">PeerId.</param>
        public NodeInfo(string ContextUri = default(string), string NemAddress = default(string), string Network = default(string), string NetworkAddress = default(string), string NetworkPort = default(string), string PeerId = default(string))
        {
            this.ContextUri = ContextUri;
            this.NemAddress = NemAddress;
            this.Network = Network;
            this.NetworkAddress = NetworkAddress;
            this.NetworkPort = NetworkPort;
            this.PeerId = PeerId;
        }
        
        /// <summary>
        /// Gets or Sets ContextUri
        /// </summary>
        [DataMember(Name="contextUri", EmitDefaultValue=false)]
        public string ContextUri { get; set; }

        /// <summary>
        /// Gets or Sets NemAddress
        /// </summary>
        [DataMember(Name="nemAddress", EmitDefaultValue=false)]
        public string NemAddress { get; set; }

        /// <summary>
        /// Gets or Sets Network
        /// </summary>
        [DataMember(Name="network", EmitDefaultValue=false)]
        public string Network { get; set; }

        /// <summary>
        /// Gets or Sets NetworkAddress
        /// </summary>
        [DataMember(Name="networkAddress", EmitDefaultValue=false)]
        public string NetworkAddress { get; set; }

        /// <summary>
        /// Gets or Sets NetworkPort
        /// </summary>
        [DataMember(Name="networkPort", EmitDefaultValue=false)]
        public string NetworkPort { get; set; }

        /// <summary>
        /// Gets or Sets PeerId
        /// </summary>
        [DataMember(Name="peerId", EmitDefaultValue=false)]
        public string PeerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NodeInfo {\n");
            sb.Append("  ContextUri: ").Append(ContextUri).Append("\n");
            sb.Append("  NemAddress: ").Append(NemAddress).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  NetworkAddress: ").Append(NetworkAddress).Append("\n");
            sb.Append("  NetworkPort: ").Append(NetworkPort).Append("\n");
            sb.Append("  PeerId: ").Append(PeerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NodeInfo);
        }

        /// <summary>
        /// Returns true if NodeInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of NodeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ContextUri == other.ContextUri ||
                    this.ContextUri != null &&
                    this.ContextUri.Equals(other.ContextUri)
                ) && 
                (
                    this.NemAddress == other.NemAddress ||
                    this.NemAddress != null &&
                    this.NemAddress.Equals(other.NemAddress)
                ) && 
                (
                    this.Network == other.Network ||
                    this.Network != null &&
                    this.Network.Equals(other.Network)
                ) && 
                (
                    this.NetworkAddress == other.NetworkAddress ||
                    this.NetworkAddress != null &&
                    this.NetworkAddress.Equals(other.NetworkAddress)
                ) && 
                (
                    this.NetworkPort == other.NetworkPort ||
                    this.NetworkPort != null &&
                    this.NetworkPort.Equals(other.NetworkPort)
                ) && 
                (
                    this.PeerId == other.PeerId ||
                    this.PeerId != null &&
                    this.PeerId.Equals(other.PeerId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ContextUri != null)
                    hash = hash * 59 + this.ContextUri.GetHashCode();
                if (this.NemAddress != null)
                    hash = hash * 59 + this.NemAddress.GetHashCode();
                if (this.Network != null)
                    hash = hash * 59 + this.Network.GetHashCode();
                if (this.NetworkAddress != null)
                    hash = hash * 59 + this.NetworkAddress.GetHashCode();
                if (this.NetworkPort != null)
                    hash = hash * 59 + this.NetworkPort.GetHashCode();
                if (this.PeerId != null)
                    hash = hash * 59 + this.PeerId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
