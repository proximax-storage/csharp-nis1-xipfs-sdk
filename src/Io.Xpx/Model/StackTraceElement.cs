/* 
 * Proximax P2P Storage REST API
 *
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: alvin.reyes@botmill.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Io.Xpx.Client.SwaggerDateConverter;

namespace Io.Xpx.Model
{
    /// <summary>
    /// StackTraceElement
    /// </summary>
    [DataContract]
    public partial class StackTraceElement :  IEquatable<StackTraceElement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StackTraceElement" /> class.
        /// </summary>
        /// <param name="ClassName">ClassName.</param>
        /// <param name="FileName">FileName.</param>
        /// <param name="LineNumber">LineNumber.</param>
        /// <param name="MethodName">MethodName.</param>
        /// <param name="NativeMethod">NativeMethod.</param>
        public StackTraceElement(string ClassName = default(string), string FileName = default(string), int? LineNumber = default(int?), string MethodName = default(string), bool? NativeMethod = default(bool?))
        {
            this.ClassName = ClassName;
            this.FileName = FileName;
            this.LineNumber = LineNumber;
            this.MethodName = MethodName;
            this.NativeMethod = NativeMethod;
        }
        
        /// <summary>
        /// Gets or Sets ClassName
        /// </summary>
        [DataMember(Name="className", EmitDefaultValue=false)]
        public string ClassName { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name="lineNumber", EmitDefaultValue=false)]
        public int? LineNumber { get; set; }

        /// <summary>
        /// Gets or Sets MethodName
        /// </summary>
        [DataMember(Name="methodName", EmitDefaultValue=false)]
        public string MethodName { get; set; }

        /// <summary>
        /// Gets or Sets NativeMethod
        /// </summary>
        [DataMember(Name="nativeMethod", EmitDefaultValue=false)]
        public bool? NativeMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StackTraceElement {\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  MethodName: ").Append(MethodName).Append("\n");
            sb.Append("  NativeMethod: ").Append(NativeMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StackTraceElement);
        }

        /// <summary>
        /// Returns true if StackTraceElement instances are equal
        /// </summary>
        /// <param name="other">Instance of StackTraceElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StackTraceElement other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClassName == other.ClassName ||
                    this.ClassName != null &&
                    this.ClassName.Equals(other.ClassName)
                ) && 
                (
                    this.FileName == other.FileName ||
                    this.FileName != null &&
                    this.FileName.Equals(other.FileName)
                ) && 
                (
                    this.LineNumber == other.LineNumber ||
                    this.LineNumber != null &&
                    this.LineNumber.Equals(other.LineNumber)
                ) && 
                (
                    this.MethodName == other.MethodName ||
                    this.MethodName != null &&
                    this.MethodName.Equals(other.MethodName)
                ) && 
                (
                    this.NativeMethod == other.NativeMethod ||
                    this.NativeMethod != null &&
                    this.NativeMethod.Equals(other.NativeMethod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClassName != null)
                    hash = hash * 59 + this.ClassName.GetHashCode();
                if (this.FileName != null)
                    hash = hash * 59 + this.FileName.GetHashCode();
                if (this.LineNumber != null)
                    hash = hash * 59 + this.LineNumber.GetHashCode();
                if (this.MethodName != null)
                    hash = hash * 59 + this.MethodName.GetHashCode();
                if (this.NativeMethod != null)
                    hash = hash * 59 + this.NativeMethod.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
